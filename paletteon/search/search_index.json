{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfa8 Paletteon \ud83c\udfa8","text":"<p>Paletteon elevates your Compose Multiplatform UI with dynamic color themes, smooth transitions, and extensive customization options.</p>"},{"location":"#live-demo","title":"Live Demo","text":"<p>Experience Paletteon in action and see its features in real-time on our Live Demo.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Material Design Color Palettes: Access and utilize Material Design color palettes with ease.</li> <li>Kotlin Multiplatform Support: Use Paletteon across various platforms including Android, iOS, and more.</li> <li>Flexible API: Manage and apply colors, themes, and palettes with a straightforward and intuitive API.</li> <li>Customizable: Extend and customize the color palettes to fit your specific design needs.</li> </ul>"},{"location":"#getting-started-with-paletteon","title":"Getting Started with Paletteon","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding Paletteon dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.  </p>"},{"location":"#adding-paletteon-dependencies-manually","title":"Adding Paletteon Dependencies Manually","text":"<p>To use Paletteon in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorPaletteon = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.paletteon:material-color-utilities:$teogorPaletteon\"\n    implementation \"dev.teogor.paletteon:paletteon-core:$teogorPaletteon\"\n    implementation \"dev.teogor.paletteon:paletteon-icons:$teogorPaletteon\"\n    implementation \"dev.teogor.paletteon:paletteon-kobweb:$teogorPaletteon\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorPaletteon = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.paletteon:material-color-utilities:$teogorPaletteon\")\n    implementation(\"dev.teogor.paletteon:paletteon-core:$teogorPaletteon\")\n    implementation(\"dev.teogor.paletteon:paletteon-icons:$teogorPaletteon\")\n    implementation(\"dev.teogor.paletteon:paletteon-kobweb:$teogorPaletteon\")\n}\n</code></pre>"},{"location":"#managing-paletteon-versions-with-version-catalog-recommended","title":"Managing Paletteon Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of Paletteon dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-paletteon = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-paletteon-material-color-utilities = { group = \"dev.teogor.paletteon\", name = \"material-color-utilities\", version.ref = \"teogor-paletteon\" }\nteogor-paletteon-core = { group = \"dev.teogor.paletteon\", name = \"paletteon-core\", version.ref = \"teogor-paletteon\" }\nteogor-paletteon-icons = { group = \"dev.teogor.paletteon\", name = \"paletteon-icons\", version.ref = \"teogor-paletteon\" }\nteogor-paletteon-kobweb = { group = \"dev.teogor.paletteon\", name = \"paletteon-kobweb\", version.ref = \"teogor-paletteon\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-paletteon = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-paletteon-material-color-utilities = { module = \"dev.teogor.paletteon:material-color-utilities\", version.ref = \"teogor-paletteon\" }\nteogor-paletteon-core = { module = \"dev.teogor.paletteon:paletteon-core\", version.ref = \"teogor-paletteon\" }\nteogor-paletteon-icons = { module = \"dev.teogor.paletteon:paletteon-icons\", version.ref = \"teogor-paletteon\" }\nteogor-paletteon-kobweb = { module = \"dev.teogor.paletteon:paletteon-kobweb\", version.ref = \"teogor-paletteon\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation libs.teogor.paletteon.material.color.utilities\n    implementation libs.teogor.paletteon.core\n    implementation libs.teogor.paletteon.icons\n    implementation libs.teogor.paletteon.kobweb\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(libs.teogor.paletteon.material.color.utilities)\n    implementation(libs.teogor.paletteon.core)\n    implementation(libs.teogor.paletteon.icons)\n    implementation(libs.teogor.paletteon.kobweb)\n}\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>To get started with <code>PaletteonDynamicTheme</code>, follow these steps:</p> <ol> <li>Add Dependencies</li> </ol> <p>Ensure you have the necessary dependencies in your project for using Paletteon with Compose Multiplatform. For detailed instructions on how to implement these dependencies, please refer to the implementation guide.</p> <ol> <li>Define Your Theme</li> </ol> <p>Use the <code>PaletteonDynamicTheme</code> composable to apply a dynamic theme based on a seed color. Here\u2019s a basic example:</p> <pre><code>import androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.runtime.Composable\nimport dev.teogor.paletteon.PaletteonDynamicTheme\nimport dev.teogor.paletteon.PaletteonThemedSurface\nimport dev.teogor.paletteon.StandardColors\n\n@Composable\nfun AppTheme(\n   content: @Composable () -&gt; Unit,\n) {\n  PaletteonDynamicTheme(\n    seedColor = StandardColors.first().color,\n    useDarkTheme = isSystemInDarkTheme(),\n    animate = true,\n  ) {\n    PaletteonThemedSurface {\n      content()\n    }\n  }\n}\n</code></pre> <p>In this example:   - <code>seedColor</code> defines the base color for the theme.   - <code>useDarkTheme</code> toggles the dark theme based on system preferences.   - <code>animate</code> enables smooth transitions between color states.</p>"},{"location":"#advanced-usage","title":"Advanced Usage","text":""},{"location":"#customizing-the-theme","title":"Customizing the Theme","text":"<p>Paletteon allows extensive customization of the theme. You can configure various parameters such as contrast, theme style, and more.</p>"},{"location":"#within-a-composable-context","title":"Within a Composable Context","text":"<p>When working within a composable context, you can use the <code>@Composable</code> version of <code>configurePaletteonTheme</code> to apply theme modifications. This will automatically update the current theme state and recompose your UI.</p> <p>Here\u2019s how you can customize the theme within a composable:</p> <pre><code>import androidx.compose.runtime.Composable\nimport dev.teogor.paletteon.PaletteonTheme\nimport dev.teogor.paletteon.configurePaletteonTheme\n\n@Composable\nfun CustomThemeSetup() {\n  configurePaletteonTheme {\n    seedColor = Color.Red\n    useDarkTheme = true\n    withAmoled = true\n    style = PaletteStyle.TonalSpot\n    contrast = Contrast.High\n    isExtendedFidelity = true\n  }\n}\n</code></pre>"},{"location":"#outside-of-a-composable-context","title":"Outside of a Composable Context","text":"<p>If you need to configure the theme outside of composable functions, such as in a non-composable setup or initialization code, you should use the non-composable <code>configurePaletteonTheme</code> function. This allows you to modify and apply the theme without the need for recomposition context.</p> <p>Here\u2019s how you can customize the theme outside of a composable:</p> <pre><code>import dev.teogor.paletteon.PaletteonTheme\nimport dev.teogor.paletteon.configurePaletteonTheme\n\nfun updateTheme(paletteonThemeState: PaletteonTheme) {\n  paletteonThemeState = configurePaletteonTheme(paletteonThemeState) {\n    nextContrast() // Example modification\n  }\n}\n</code></pre>"},{"location":"#accessing-the-current-theme","title":"Accessing the Current Theme","text":"<p>You can access and manipulate the current <code>PaletteonTheme</code> using the following properties:</p> <ul> <li><code>PaletteonTheme.currentState</code>: Provides a <code>MutableState</code> of the current theme. This allows you to change the theme and automatically update the UI.</li> </ul> <pre><code>import androidx.compose.runtime.Composable\nimport dev.teogor.paletteon.PaletteonTheme\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.getValue\n\n@Composable\nfun ThemeModifier() {\n  var themeState by PaletteonTheme.currentState\n  // Use themeState to observe or modify the current theme\n}\n</code></pre> <ul> <li><code>PaletteonTheme.current</code>: Provides read-only access to the current theme. It returns the current <code>PaletteonTheme</code> value as provided by <code>LocalPaletteonTheme</code>. Use this to access the current theme settings without modifying them.</li> </ul> <p>If you want to use colors defined by the current theme, use <code>PaletteonTheme.current</code>. For example, to access a primary color:</p> <pre><code>import androidx.compose.runtime.Composable\nimport dev.teogor.paletteon.PaletteonTheme\n\n@Composable\nfun ThemedComponent() {\n  val currentTheme = PaletteonTheme.current\n  val primaryColor = currentTheme.colorScheme.primary\n\n  // Use primaryColor in your composable\n}\n</code></pre> <p>Alternatively, if you want to use the default colors provided by Material Theme, you can use <code>MaterialTheme</code>:</p> <pre><code>import androidx.compose.material3.MaterialTheme\n\n@Composable\nfun ThemedComponent() {\n  val primaryColor = MaterialTheme.colorScheme.primary\n\n  // Use primaryColor in your composable\n}\n</code></pre> <p>Use <code>PaletteonTheme.current</code> if you need to apply custom colors defined in your <code>PaletteonTheme</code>. Use <code>MaterialTheme</code> for standard Material Design colors.</p>"},{"location":"#animating-color-transitions","title":"Animating Color Transitions","text":"<p>If you want to animate color transitions, enable the <code>animate</code> parameter in <code>PaletteonDynamicTheme</code>:</p> <pre><code>import androidx.compose.animation.core.spring\nimport androidx.compose.runtime.Composable\nimport dev.teogor.paletteon.PaletteonDynamicTheme\nimport dev.teogor.paletteon.StandardColors\n\n@Composable\nfun AnimatedThemeExample() {\n  PaletteonDynamicTheme(\n    seedColor = StandardColors.primary().color,\n    animate = true,\n    animationSpec = spring(stiffness = Spring.StiffnessHigh),\n  ) {\n    // Your content here\n  }\n}\n</code></pre>"},{"location":"#kobweb-integration","title":"Kobweb Integration","text":"<p>To integrate Paletteon with Kobweb, follow these steps:</p> <ol> <li>Initialize Paletteon in Your Application</li> </ol> <p>Add the following initialization code in your <code>@InitSilk</code> function:</p> <pre><code>@InitSilk\nfun initSilk(ctx: InitSilkContext) {\n  initPaletteon(ctx)\n}\n</code></pre> <ol> <li>Wrap Your Application with Paletteon Providers</li> </ol> <p>Use <code>PaletteonKobwebProvider</code> in your main application composable to apply the Paletteon theme:</p> <pre><code>@App\n@Composable\nfun MyApp(content: @Composable () -&gt; Unit) {\n  SilkApp {\n    val paletteonTheme by PaletteonTheme.currentState\n\n    PaletteonKobwebProvider {\n      PaletteonDynamicTheme(\n        seedColor = paletteonTheme.seedColor,\n        useDarkTheme = paletteonTheme.useDarkTheme,\n        withAmoled = paletteonTheme.withAmoled,\n        style = paletteonTheme.style,\n        contrast = paletteonTheme.contrast,\n        isExtendedFidelity = paletteonTheme.isExtendedFidelity,\n        animate = paletteonTheme.animate\n      ) {\n        PaletteonSurface(\n          modifier = Modifier\n            .fillMaxWidth()\n            .minHeight(100.vh)\n            .backgroundColor(paletteonTheme.colorScheme.background.asRgba()),\n          color = paletteonTheme.colorScheme.background,\n        ) {\n          content()\n        }\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Using Paletteon Theme in Your Composables</li> </ol> <p>Access and apply the Paletteon theme in your composables like this:</p> <pre><code>@Composable\nfun NavHeader() {\n  var paletteonTheme by PaletteonTheme.currentState\n  Box(\n    modifier = NavHeaderStyle.toModifier()\n      .backgroundColor(paletteonTheme.colorScheme.background.copy(alpha = .65f)),\n    contentAlignment = Alignment.Center\n  ) {\n    // Your content here\n  }\n}\n</code></pre>"},{"location":"#package-information","title":"Package Information","text":"<p>To use Paletteon with Kobweb, add the following dependency to your project:</p> <pre><code>dependencies {\n  implementation(\"dev.teogor.paletteon:paletteon-kobweb:&lt;version&gt;\")\n}\n</code></pre> <p>Replace <code>&lt;version&gt;</code> with the desired version of the <code>paletteon-kobweb</code> library. For detailed instructions on how to implement these dependencies, please refer to the implementation guide.</p>"},{"location":"#paletteon-icons","title":"Paletteon Icons","text":"<p>Paletteon offers a diverse set of icons for enriching your user interface. Below are examples of how to use some of these icons:</p>"},{"location":"#examples","title":"Examples","text":"<ul> <li> <p>BulbOn:   <pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun BulbOnIcon() {\n    Icon(imageVector = Icons.Filled.BulbOn, contentDescription = \"Bulb On Icon\")\n}\n</code></pre></p> </li> <li> <p>LightMode:   <pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun LightModeIcon() {\n    Icon(imageVector = Icons.Filled.LightMode, contentDescription = \"Light Mode Icon\")\n}\n</code></pre></p> </li> </ul>"},{"location":"#package-information_1","title":"Package Information","text":"<p>To use the Paletteon Icons library, add the following dependency to your project:</p> <pre><code>dependencies {\n  implementation(\"dev.teogor.paletteon:paletteon-icons:&lt;version&gt;\")\n}\n</code></pre> <p>Replace <code>&lt;version&gt;</code> with the desired version of the <code>paletteon-icons</code> library. For detailed instructions on how to implement these dependencies, please refer to the implementation guide.</p>"},{"location":"#advanced-icon-guide","title":"Advanced Icon Guide","text":"<p>For a comprehensive list of all available icons and detailed usage instructions, please refer to the Paletteon Icons Documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions to Paletteon are welcome! If you have any ideas, bug reports, or feature requests, please open an issue or submit a pull request. For more information, please refer to our Contributing Guidelines.</p>"},{"location":"#find-this-repository-useful-heart","title":"Find this repository useful? :heart:","text":"<p>Support it by joining stargazers for this repository. :star:  Also, follow me on GitHub for my next creations! \ud83e\udd29</p>"},{"location":"#license","title":"License","text":"<pre><code>  Designed and developed by 2024 Teogor (Teodor Grigor)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#reference","title":"Reference","text":"<p>Welcome to the comprehensive API documentation for our project, meticulously crafted to empower you to effectively utilize its capabilities. This guide provides detailed information about the project's structure, API, and usage, enabling you to navigate the project with ease and unlock its full potential.</p>"},{"location":"reference/#project-overview","title":"Project Overview","text":"<p>Our project encompasses a suite of modules, each designed to address specific functionalities and enhance the overall developer experience. To delve into the intricacies of each module, refer to the dedicated documentation pages:</p>"},{"location":"reference/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.paletteon</code></li> <li><code>dev.teogor.paletteon:material-color-utilities</code></li> <li><code>dev.teogor.paletteon:paletteon-core</code></li> <li><code>dev.teogor.paletteon:paletteon-icons</code></li> <li><code>dev.teogor.paletteon:paletteon-kobweb</code></li> </ul>"},{"location":"reference/#contributions-and-support","title":"Contributions and Support","text":"<p>We welcome your valuable feedback and contributions to the project. Your insights are crucial for shaping the project's future and ensuring it continues to meet the needs of our community. If you encounter any issues or have questions, please feel free to raise them on the GitHub Issues \ud83d\udd17 page. Our team is dedicated to assisting you and continuously improving the project's overall quality.</p>"},{"location":"reference/#embark-on-your-coding-journey","title":"Embark on Your Coding Journey","text":"<p>With this extensive documentation as your guide, you are now well-equipped to embark on your coding journey with our project. We hope you find the documentation informative and helpful as you explore the project's capabilities and bring your ideas to life.</p> <p>Happy coding!</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Please refer to this table to see which versions of the project are currently receiving security updates:</p> Version Supported STABLE \u2705 ALPHA \u274c BETA \u274c"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability within this project, please follow these steps:</p> <ol> <li> <p>Do Not Disclose Publicly: Do not publicly disclose the vulnerability until it has been    addressed and a security release is available.</p> </li> <li> <p>Contact Us: Report the vulnerability to us by sending an email    to open-source@teogor.dev. You can encrypt sensitive information    using our PGP key to ensure the confidentiality of    the report.</p> </li> <li> <p>Provide Details: Please provide us with detailed information about the vulnerability,    including steps to reproduce, affected versions, and potential impact.</p> </li> <li> <p>Acknowledgment: We will acknowledge your report within 48 hours to confirm that we have    received it and are investigating.</p> </li> <li> <p>Resolution: Our security team will work to validate and address the vulnerability. We will    keep you informed about our progress and expected timelines for resolution.</p> </li> <li> <p>Disclosure: Once the vulnerability is fixed and a release is available, we will work with you    to determine an appropriate timeline for public disclosure. We appreciate your patience during    this process.</p> </li> </ol> <p>Thank you for helping us improve the security of our project.</p> <p>PGP key</p>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":""},{"location":"sponsor/#about-teodor-grigor","title":"About Teodor Grigor","text":"<p>As an active open-source developer, Teodor Grigor (also known as Teogor) has made significant contributions to the developer community by creating and maintaining an extensive portfolio of open-source projects and libraries, primarily focused on Android and Kotlin development. His work has had a profound impact on the development landscape, with his projects being adopted by millions of projects, software engineers, and end-users worldwide.</p>"},{"location":"sponsor/#impact-of-teodor-grigors-work","title":"Impact of Teodor Grigor's Work","text":"<p>Teodor Grigor's open-source contributions have had a significant impact on the developer community. His projects have been used by millions of developers around the world to build high-quality Android and Kotlin applications.</p>"},{"location":"sponsor/#expressing-gratitude-and-supporting-development","title":"Expressing Gratitude and Supporting Development","text":"<p>Has this library helped you streamline your development process and reduce costs? If so, consider expressing your gratitude and supporting the developer's efforts through the provided sponsorship links below.</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Your support is crucial for the ongoing development and enhancement of this library, ensuring it remains a valuable asset for the community. By contributing, you not only express your appreciation but also actively participate in the growth and success of open-source projects like this one. Join us in making a positive impact on the developer's efforts and the future of this project.</p>"},{"location":"sponsor/#contact-teodor-grigor","title":"Contact Teodor Grigor","text":"<p>If you have suggestions for feature requests or would like to explore sponsorship opportunities, please contact the author using the following details:</p> <ul> <li>open-source@teogor.dev</li> <li>LinkedIn</li> <li>Instagram</li> <li>X (formerly known as Twitter)</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Show your support by being the first sponsor of this library!</p>"},{"location":"sponsor/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Your support is crucial for the ongoing development and enhancement of this library. By becoming a sponsor, you can help us:</p> <ul> <li>Continue developing new features and improvements</li> <li>Maintain and update the library for compatibility with the latest technologies</li> <li>Provide timely support to users</li> </ul> <p>Show your appreciation for this valuable library and become a sponsor. Your support makes a real difference!</p> <p>Thank you for your consideration!</p>"},{"location":"icons/","title":"Paletteon Icons Documentation","text":"<p>Welcome to the Paletteon Icons documentation. This guide provides an overview of the icons available in the Paletteon library, how to implement them, and advanced techniques for manipulating vector graphics.</p>"},{"location":"icons/#package-information","title":"Package Information","text":"<p>To use the Paletteon Icons library, add the following dependency to your project:</p> <pre><code>dependencies {\n    implementation(\"dev.teogor.paletteon:paletteon-icons:&lt;version&gt;\")\n}\n</code></pre> <p>Replace <code>&lt;version&gt;</code> with the desired version of the <code>paletteon-icons</code> library.</p> <p>For detailed instructions on how to implement these dependencies, please refer to the implementation guide.</p>"},{"location":"icons/#icons-overview","title":"Icons Overview","text":"<p>Paletteon Icons provides a range of icons to enhance your Compose Multiplatform applications. Here are a few examples:</p>"},{"location":"icons/#animation-icon","title":"Animation Icon","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun AnimationIcon() {\n    Icon(imageVector = Icons.Filled.Animation, contentDescription = \"Animation Icon\")\n}\n</code></pre>"},{"location":"icons/#lightmode-icon","title":"LightMode Icon","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun LightModeIcon() {\n    Icon(imageVector = Icons.Filled.LightMode, contentDescription = \"Light Mode Icon\")\n}\n</code></pre> <p>For a complete list of all available icons and their usage, please refer to the Icons Overview.</p>"},{"location":"icons/#advanced-image-handling","title":"Advanced Image Handling","text":"<p>Paletteon Icons provides utilities for advanced image handling and transformations. This includes rotating and flipping <code>ImageVector</code> instances.</p>"},{"location":"icons/#rotation-and-flipping","title":"Rotation and Flipping","text":"<p>You can use the <code>ImageVectorEditor</code> class to apply various transformations to your icons:</p>"},{"location":"icons/#degrees-enum","title":"Degrees Enum","text":"<p>Defines predefined rotation angles:</p> <pre><code>public enum class Degrees(internal val value: Float) {\n    D0(0f),\n    D45(45f),\n    D90(90f),\n    D135(135f),\n    D180(180f),\n    D225(225f),\n    D270(270f),\n    D315(315f)\n}\n</code></pre>"},{"location":"icons/#flip-enum","title":"Flip Enum","text":"<p>Defines flipping options:</p> <pre><code>public enum class Flip {\n    None,\n    Horizontal,\n    Vertical,\n    HorizontalVertical\n}\n</code></pre>"},{"location":"icons/#imagevectoreditor","title":"ImageVectorEditor","text":"<p>Apply rotations and flips to an <code>ImageVector</code>:</p> <pre><code>import androidx.compose.ui.graphics.vector.ImageVector\nimport dev.teogor.paletteon.icons.Degrees\nimport dev.teogor.paletteon.icons.Flip\nimport dev.teogor.paletteon.icons.ImageVectorEditor\nimport dev.teogor.paletteon.PaletteonDsl\n\n@PaletteonDsl\npublic fun ImageVector.applyTransformations(\n    transform: ImageVectorEditor.() -&gt; Unit,\n): ImageVector {\n    val editor = ImageVectorEditor(this)\n    editor.transform()\n    return editor.build()\n}\n</code></pre> <p>Example Usage:</p> <pre><code>import dev.teogor.paletteon.icons.Icons\nimport dev.teogor.paletteon.icons.applyTransformations\n\n@Composable\nfun RotatedLightModeIcon() {\n    val icon = Icons.Filled.LightMode.applyTransformations {\n        rotate(Degrees.D90)\n        flip(Flip.Horizontal)\n    }\n    Icon(imageVector = icon, contentDescription = \"Rotated Light Mode Icon\")\n}\n</code></pre> <p>This example demonstrates how to apply a 90-degree rotation and horizontal flip to an icon.</p>"},{"location":"icons/#additional-information","title":"Additional Information","text":"<p>For more detailed usage instructions and a complete list of all available icons, please refer to the implementation guide.</p>"},{"location":"icons/overview/","title":"Paletteon Icons Overview","text":"<p>Paletteon Icons provides a variety of icons that you can use to enhance your Compose Multiplatform applications. Below is an overview of the available icons, along with example usage.</p>"},{"location":"icons/overview/#available-icons","title":"Available Icons","text":""},{"location":"icons/overview/#animation","title":"Animation","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun AnimationIcon() {\n    Icon(imageVector = Icons.Filled.Animation, contentDescription = \"Animation Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#blur","title":"Blur","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun BlurIcon() {\n    Icon(imageVector = Icons.Filled.Blur, contentDescription = \"Blur Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#brightness","title":"Brightness","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun BrightnessIcon() {\n    Icon(imageVector = Icons.Filled.Brightness, contentDescription = \"Brightness Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#bulboff","title":"BulbOff","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun BulbOffIcon() {\n    Icon(imageVector = Icons.Filled.BulbOff, contentDescription = \"Bulb Off Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#bulbon","title":"BulbOn","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun BulbOnIcon() {\n    Icon(imageVector = Icons.Filled.BulbOn, contentDescription = \"Bulb On Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#coloradjustmentmode","title":"ColorAdjustmentMode","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ColorAdjustmentModeIcon() {\n    Icon(imageVector = Icons.Filled.ColorAdjustmentMode, contentDescription = \"Color Adjustment Mode Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#colorbucket","title":"ColorBucket","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ColorBucketIcon() {\n    Icon(imageVector = Icons.Filled.ColorBucket, contentDescription = \"Color Bucket Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#colorswatch","title":"ColorSwatch","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ColorSwatchIcon() {\n    Icon(imageVector = Icons.Filled.ColorSwatch, contentDescription = \"Color Swatch Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#contrast","title":"Contrast","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ContrastIcon() {\n    Icon(imageVector = Icons.Filled.Contrast, contentDescription = \"Contrast Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#contrastinverse","title":"ContrastInverse","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ContrastInverseIcon() {\n    Icon(imageVector = Icons.Filled.ContrastInverse, contentDescription = \"Contrast Inverse Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#contrastdrop","title":"ContrastDrop","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ContrastDropIcon() {\n    Icon(imageVector = Icons.Filled.ContrastDrop, contentDescription = \"Contrast Drop Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#contrastdropinverse","title":"ContrastDropInverse","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun ContrastDropInverseIcon() {\n    Icon(imageVector = Icons.Filled.ContrastDropInverse, contentDescription = \"Contrast Drop Inverse Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#darkmode","title":"DarkMode","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun DarkModeIcon() {\n    Icon(imageVector = Icons.Filled.DarkMode, contentDescription = \"Dark Mode Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#filters","title":"Filters","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun FiltersIcon() {\n    Icon(imageVector = Icons.Filled.Filters, contentDescription = \"Filters Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#lightmode","title":"LightMode","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun LightModeIcon() {\n    Icon(imageVector = Icons.Filled.LightMode, contentDescription = \"Light Mode Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#magicstick","title":"MagicStick","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun MagicStickIcon() {\n    Icon(imageVector = Icons.Filled.MagicStick, contentDescription = \"Magic Stick Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#palette","title":"Palette","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun PaletteIcon() {\n    Icon(imageVector = Icons.Filled.Palette, contentDescription = \"Palette Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#palette2","title":"Palette2","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun Palette2Icon() {\n    Icon(imageVector = Icons.Filled.Palette2, contentDescription = \"Palette 2 Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#paletteround","title":"PaletteRound","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun PaletteRoundIcon() {\n    Icon(imageVector = Icons.Filled.PaletteRound, contentDescription = \"Palette Round Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#pipette","title":"Pipette","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun PipetteIcon() {\n    Icon(imageVector = Icons.Filled.Pipette, contentDescription = \"Pipette Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#sparkles","title":"Sparkles","text":"<pre><code>import dev.teogor.paletteon.icons.Icons\nimport androidx.compose.material3.Icon\n\n@Composable\nfun SparklesIcon() {\n    Icon(imageVector = Icons.Filled.Sparkles, contentDescription = \"Sparkles Icon\")\n}\n</code></pre>"},{"location":"icons/overview/#implementation-guide","title":"Implementation Guide","text":"<p>For detailed instructions on how to implement these icons into your project, please refer to the implementation guide.</p>"},{"location":"releases/","title":"Crosslens","text":"<p>Learn more: User Guide and Code Samples</p> <p>\ud83d\udd0d CrossLens delivers precise platform insights for Kotlin Multiplatform projects, enabling seamless adaptation across diverse environments.</p> <p>API Reference <code>dev.teogor.paletteon:paletteon-*</code> <code>dev.teogor.paletteon:material-color-utilities</code> <code>dev.teogor.paletteon:paletteon-core</code> <code>dev.teogor.paletteon:paletteon-icons</code> <code>dev.teogor.paletteon:paletteon-kobweb</code></p> Latest Update Stable Release Release Candidate Beta Release Alpha Release August 30, 2024 - - - 1.0.0-alpha01"},{"location":"releases/#declaring-dependencies","title":"Declaring dependencies","text":"<p>To use Paletteon in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorPaletteon = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.paletteon:material-color-utilities:$teogorPaletteon\"\n    implementation \"dev.teogor.paletteon:paletteon-core:$teogorPaletteon\"\n    implementation \"dev.teogor.paletteon:paletteon-icons:$teogorPaletteon\"\n    implementation \"dev.teogor.paletteon:paletteon-kobweb:$teogorPaletteon\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorPaletteon = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.paletteon:material-color-utilities:$teogorPaletteon\")\n    implementation(\"dev.teogor.paletteon:paletteon-core:$teogorPaletteon\")\n    implementation(\"dev.teogor.paletteon:paletteon-icons:$teogorPaletteon\")\n    implementation(\"dev.teogor.paletteon:paletteon-kobweb:$teogorPaletteon\")\n}\n</code></pre> <p>For comprehensive instructions on adding these dependencies, refer to the Paletteon documentation.</p>"},{"location":"releases/#feedback","title":"Feedback","text":"<p>Your feedback helps make Paletteon better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues on GitHub for this library before you create a new one.</p> <p>Create a new issue</p>"},{"location":"releases/#version-100","title":"Version 1.0.0","text":""},{"location":"releases/#version-100-alpha01","title":"Version 1.0.0-alpha01","text":"<p>August 30, 2024</p> <p><code>dev.teogor.paletteon:paletteon-*:1.0.0-alpha01</code> is released. Version 1.0.0-alpha01 contains these commits</p>"},{"location":"releases/#introducing-crosslens-v100-alpha01","title":"\ud83c\udf89 Introducing CrossLens v1.0.0-alpha01 \ud83e\udde9","text":"<p>\ud83d\udd0d CrossLens provides precise platform insights for Kotlin Multiplatform projects, ensuring seamless adaptation across various environments. Whether you're developing for mobile, desktop, or IoT, CrossLens helps you understand and manage platform-specific details with ease.</p>"},{"location":"releases/#features-multi-platform-support-get-detailed-information-about-the-platform-your-code-is-running-on-across-different-environments-seamless-integration-easily-integrate-with-your-existing-kotlin-multiplatform-projects-up-to-date-insights-stay-informed-with-the-latest-platform-information-to-ensure-compatibility-and-optimal-performance","title":"Features - Multi-Platform Support: Get detailed information about the platform your code is running on, across different environments. - Seamless Integration: Easily integrate with your existing Kotlin Multiplatform projects. - Up-to-Date Insights: Stay informed with the latest platform information to ensure compatibility and optimal performance.","text":""},{"location":"blog/","title":"Blog","text":""}]}