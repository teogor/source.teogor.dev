{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udd0d CrossLens \ud83d\udd0d","text":""},{"location":"#overview","title":"Overview","text":"<p>\ud83d\udd0d CrossLens delivers precise platform insights for Kotlin Multiplatform projects, enabling seamless adaptation across diverse environments.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multi-Platform Support: Access detailed information about the platform your code runs on, across various environments.</li> <li>Seamless Integration: Integrate smoothly with your existing Kotlin Multiplatform projects.</li> <li>Up-to-Date Insights: Keep informed with the latest platform information for compatibility and optimal performance.</li> </ul>"},{"location":"#getting-started-with-crosslens","title":"Getting Started with Crosslens","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding Crosslens dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.  </p>"},{"location":"#adding-crosslens-dependencies-manually","title":"Adding Crosslens Dependencies Manually","text":"<p>To use Crosslens in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorCrosslens = \"1.0.0-alpha02\"\n\n    implementation \"dev.teogor.crosslens:crosslens-compose:$teogorCrosslens\"\n    implementation \"dev.teogor.crosslens:crosslens-core:$teogorCrosslens\"\n    implementation \"dev.teogor.crosslens:crosslens-ui:$teogorCrosslens\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorCrosslens = \"1.0.0-alpha02\"\n\n    implementation(\"dev.teogor.crosslens:crosslens-compose:$teogorCrosslens\")\n    implementation(\"dev.teogor.crosslens:crosslens-core:$teogorCrosslens\")\n    implementation(\"dev.teogor.crosslens:crosslens-ui:$teogorCrosslens\")\n}\n</code></pre>"},{"location":"#managing-crosslens-versions-with-version-catalog-recommended","title":"Managing Crosslens Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of Crosslens dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-crosslens = \"1.0.0-alpha02\"\n\n[libraries]\nteogor-crosslens-compose = { group = \"dev.teogor.crosslens\", name = \"crosslens-compose\", version.ref = \"teogor-crosslens\" }\nteogor-crosslens-core = { group = \"dev.teogor.crosslens\", name = \"crosslens-core\", version.ref = \"teogor-crosslens\" }\nteogor-crosslens-ui = { group = \"dev.teogor.crosslens\", name = \"crosslens-ui\", version.ref = \"teogor-crosslens\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-crosslens = \"1.0.0-alpha02\"\n\n[libraries]\nteogor-crosslens-compose = { module = \"dev.teogor.crosslens:crosslens-compose\", version.ref = \"teogor-crosslens\" }\nteogor-crosslens-core = { module = \"dev.teogor.crosslens:crosslens-core\", version.ref = \"teogor-crosslens\" }\nteogor-crosslens-ui = { module = \"dev.teogor.crosslens:crosslens-ui\", version.ref = \"teogor-crosslens\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation libs.teogor.crosslens.compose\n    implementation libs.teogor.crosslens.core\n    implementation libs.teogor.crosslens.ui\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(libs.teogor.crosslens.compose)\n    implementation(libs.teogor.crosslens.core)\n    implementation(libs.teogor.crosslens.ui)\n}\n</code></pre>"},{"location":"#kotlin-multiplatform-support","title":"Kotlin Multiplatform Support","text":"<p>CrossLens supports the following platforms:</p> <ul> <li>JVM: Full support for JVM with Kotlin toolchain version 11.</li> <li>JavaScript (JS): Compatible with both browser and Node.js environments using Kotlin/JS IR backend.</li> <li>WASM: WebAssembly support for browser and Node.js environments.</li> <li>iOS: Native support for iOS devices, including x64, Arm64, and Simulator Arm64.</li> <li>macOS: Native support for macOS devices, including x64 and Arm64.</li> <li>Linux: Native support for Linux devices, including x64 and Arm64.</li> <li>tvOS: Native support for tvOS devices, including x64, Arm64, and Simulator Arm64.</li> <li>watchOS: Native support for watchOS devices, including x64, Arm32, Arm64, Device Arm64, and Simulator Arm64.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you have ideas, bug reports, or feature requests, please open an issue or submit a pull request. For more details, refer to our Contributing Guidelines.</p>"},{"location":"#find-this-repository-useful-heart","title":"Find this repository useful? :heart:","text":"<p>Support it by joining the stargazers for this repository. :star:  Also, follow me on GitHub for updates on my next creations! \ud83e\udd29</p>"},{"location":"#license","title":"License","text":"<pre><code>  Designed and developed by 2024 teogor (Teodor Grigor)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n</code></pre>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Please refer to this table to see which versions of the project are currently receiving security updates:</p> Version Supported STABLE \u2705 ALPHA \u274c BETA \u274c"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability within this project, please follow these steps:</p> <ol> <li> <p>Do Not Disclose Publicly: Do not publicly disclose the vulnerability until it has been    addressed and a security release is available.</p> </li> <li> <p>Contact Us: Report the vulnerability to us by sending an email    to open-source@teogor.dev. You can encrypt sensitive information    using our PGP key to ensure the confidentiality of    the report.</p> </li> <li> <p>Provide Details: Please provide us with detailed information about the vulnerability,    including steps to reproduce, affected versions, and potential impact.</p> </li> <li> <p>Acknowledgment: We will acknowledge your report within 48 hours to confirm that we have    received it and are investigating.</p> </li> <li> <p>Resolution: Our security team will work to validate and address the vulnerability. We will    keep you informed about our progress and expected timelines for resolution.</p> </li> <li> <p>Disclosure: Once the vulnerability is fixed and a release is available, we will work with you    to determine an appropriate timeline for public disclosure. We appreciate your patience during    this process.</p> </li> </ol> <p>Thank you for helping us improve the security of our project.</p> <p>PGP key</p>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":""},{"location":"sponsor/#about-teodor-grigor","title":"About Teodor Grigor","text":"<p>As an active open-source developer, Teodor Grigor (also known as Teogor) has made significant contributions to the developer community by creating and maintaining an extensive portfolio of open-source projects and libraries, primarily focused on Android and Kotlin development. His work has had a profound impact on the development landscape, with his projects being adopted by millions of projects, software engineers, and end-users worldwide.</p>"},{"location":"sponsor/#impact-of-teodor-grigors-work","title":"Impact of Teodor Grigor's Work","text":"<p>Teodor Grigor's open-source contributions have had a significant impact on the developer community. His projects have been used by millions of developers around the world to build high-quality Android and Kotlin applications.</p>"},{"location":"sponsor/#expressing-gratitude-and-supporting-development","title":"Expressing Gratitude and Supporting Development","text":"<p>Has this library helped you streamline your development process and reduce costs? If so, consider expressing your gratitude and supporting the developer's efforts through the provided sponsorship links below.</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Your support is crucial for the ongoing development and enhancement of this library, ensuring it remains a valuable asset for the community. By contributing, you not only express your appreciation but also actively participate in the growth and success of open-source projects like this one. Join us in making a positive impact on the developer's efforts and the future of this project.</p>"},{"location":"sponsor/#contact-teodor-grigor","title":"Contact Teodor Grigor","text":"<p>If you have suggestions for feature requests or would like to explore sponsorship opportunities, please contact the author using the following details:</p> <ul> <li>open-source@teogor.dev</li> <li>LinkedIn</li> <li>Instagram</li> <li>X (formerly known as Twitter)</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Show your support by being the first sponsor of this library!</p>"},{"location":"sponsor/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Your support is crucial for the ongoing development and enhancement of this library. By becoming a sponsor, you can help us:</p> <ul> <li>Continue developing new features and improvements</li> <li>Maintain and update the library for compatibility with the latest technologies</li> <li>Provide timely support to users</li> </ul> <p>Show your appreciation for this valuable library and become a sponsor. Your support makes a real difference!</p> <p>Thank you for your consideration!</p>"},{"location":"ui-overview/","title":"CrossLens UI","text":"<p><code>crosslens-ui</code> is a Kotlin-based package designed for managing UI components and their visibility states within a Jetpack Compose application. It provides a set of utilities and classes that simplify the control and handling of visibility states, ensuring a smooth user experience.</p>"},{"location":"ui-overview/#installation","title":"Installation","text":"<p>To use the <code>crosslens-ui</code> package, add the following dependency to your <code>build.gradle.kts</code>:</p> <pre><code>dependencies {\n  implementation(\"dev.teogor.crosslens:crosslens-ui:$version\")\n}\n</code></pre>"},{"location":"ui-overview/#usage","title":"Usage","text":""},{"location":"ui-overview/#visibilitystate","title":"VisibilityState","text":"<p>The <code>VisibilityState</code> interface is a core component of the <code>crosslens-ui</code> package. It defines a contract for managing the visibility of UI components, allowing developers to show, hide, and toggle visibility with ease.</p>"},{"location":"ui-overview/#defining-a-visibilitystate","title":"Defining a VisibilityState","text":"<p>The default implementation of <code>VisibilityState</code> is <code>VisibilityStateImpl</code>, which can be remembered across recompositions using the <code>rememberVisibilityState</code> function.</p> <pre><code>@Composable\nfun MyComponent() {\n  val visibilityState by rememberVisibilityState()\n\n  // Show the component\n  visibilityState.show()\n\n  // Hide the component\n  visibilityState.hide()\n\n  // Toggle the component's visibility\n  visibilityState.toggle()\n}\n</code></pre>"},{"location":"ui-overview/#custom-visibilitystate","title":"Custom VisibilityState","text":"<p>You can create your own implementation of <code>VisibilityState</code> by extending the interface. This is useful when you need to manage additional properties alongside visibility.</p> <p>For example, here\u2019s a custom implementation called <code>MenuVisibility</code>:</p> <pre><code>class MenuVisibility(\n  initialState: Boolean = false,\n) : VisibilityState {\n  // Custom properties\n  private val _isVisible = mutableStateOf(initialState)\n  override val isVisible: Boolean get() = _isVisible.value\n\n  override val scope: CoroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)\n\n  override fun show() {\n    _isVisible.value = true\n  }\n\n  override fun hide() {\n    _isVisible.value = false\n  }\n\n  override fun toggle() {\n    _isVisible.value = !isVisible\n  }\n\n  companion object Factory : VisibilityState.Factory&lt;MenuVisibility&gt; {\n    override fun create(initialState: Boolean): MenuVisibility {\n      return MenuVisibility(initialState)\n    }\n  }\n}\n</code></pre>"},{"location":"ui-overview/#remembering-a-custom-visibilitystate","title":"Remembering a Custom VisibilityState","text":"<p>To remember a custom <code>VisibilityState</code> instance, use the <code>rememberVisibilityState</code> function with a factory or factory provider:</p> <pre><code>@Composable\nfun MyMenuComponent() {\n  val menuVisibility by rememberVisibilityState(factory = MenuVisibility)\n  // Or\n  val menuVisibility by rememberVisibilityState { MenuVisibility }\n\n  // Use the visibility state\n  if (menuVisibility.isVisible) {\n    // Render your menu\n  }\n}\n</code></pre>"},{"location":"ui-overview/#advanced-configuration","title":"Advanced Configuration","text":"<p>You can apply additional configurations to your <code>VisibilityState</code> instance by using the <code>withConfiguration</code> extension function:</p> <pre><code>@Composable\nfun MyConfigurableComponent() {\n  val visibilityState = rememberVisibilityState()\n    .withConfiguration {\n      // Apply custom configurations here\n      toggle()\n    }\n\n  // Use the configured visibility state\n}\n</code></pre>"},{"location":"releases/","title":"Crosslens","text":"<p>Learn more: User Guide and Code Samples</p> <p>\ud83d\udd0d CrossLens delivers precise platform insights for Kotlin Multiplatform projects, enabling seamless adaptation across diverse environments.</p> <p>API Reference <code>dev.teogor.crosslens:crosslens-*</code> <code>dev.teogor.crosslens:crosslens-compose</code> <code>dev.teogor.crosslens:crosslens-core</code> <code>dev.teogor.crosslens:crosslens-ui</code></p> Latest Update Stable Release Release Candidate Beta Release Alpha Release September 02, 2024 - - - 1.0.0-alpha02"},{"location":"releases/#declaring-dependencies","title":"Declaring dependencies","text":"<p>To use Crosslens in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorCrosslens = \"1.0.0-alpha02\"\n\n    implementation \"dev.teogor.crosslens:crosslens-compose:$teogorCrosslens\"\n    implementation \"dev.teogor.crosslens:crosslens-core:$teogorCrosslens\"\n    implementation \"dev.teogor.crosslens:crosslens-ui:$teogorCrosslens\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorCrosslens = \"1.0.0-alpha02\"\n\n    implementation(\"dev.teogor.crosslens:crosslens-compose:$teogorCrosslens\")\n    implementation(\"dev.teogor.crosslens:crosslens-core:$teogorCrosslens\")\n    implementation(\"dev.teogor.crosslens:crosslens-ui:$teogorCrosslens\")\n}\n</code></pre> <p>For comprehensive instructions on adding these dependencies, refer to the Crosslens documentation.</p>"},{"location":"releases/#feedback","title":"Feedback","text":"<p>Your feedback helps make Crosslens better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues on GitHub for this library before you create a new one.</p> <p>Create a new issue</p>"},{"location":"releases/#version-100","title":"Version 1.0.0","text":""},{"location":"releases/#version-100-alpha02","title":"Version 1.0.0-alpha02","text":"<p>September 02, 2024</p> <p><code>dev.teogor.crosslens:crosslens-*:1.0.0-alpha02</code> is released. Version 1.0.0-alpha02 contains these commits</p> <p>Enhancement</p> <ul> <li>Implement Thread-Safe Collections <code>SynchronizedMap</code> and <code>SynchronizedSet</code> (#5) by @teogor</li> <li>Implement Configuration State Monitoring for Compose (#4) by @teogor</li> <li>Introduce Support for Platform-Specific Class Name Formats (#3) by @teogor</li> <li>Introduce HashCodeBuilder Utility and Lazy HashCode Functions (#2) by @teogor</li> <li>Introduce VisibilityState Interface and Composable Utilities for Visibility Management (#1) by @teogor</li> </ul>"},{"location":"releases/#version-100-alpha01","title":"Version 1.0.0-alpha01","text":"<p>August 30, 2024</p> <p><code>dev.teogor.crosslens:crosslens-*:1.0.0-alpha01</code> is released. Version 1.0.0-alpha01 contains these commits</p>"},{"location":"releases/#introducing-crosslens-v100-alpha01","title":"\ud83c\udf89 Introducing CrossLens v1.0.0-alpha01 \ud83e\udde9","text":"<p>\ud83d\udd0d CrossLens provides precise platform insights for Kotlin Multiplatform projects, ensuring seamless adaptation across various environments. Whether you're developing for mobile, desktop, or IoT, CrossLens helps you understand and manage platform-specific details with ease.</p>"},{"location":"releases/#features-multi-platform-support-get-detailed-information-about-the-platform-your-code-is-running-on-across-different-environments-seamless-integration-easily-integrate-with-your-existing-kotlin-multiplatform-projects-up-to-date-insights-stay-informed-with-the-latest-platform-information-to-ensure-compatibility-and-optimal-performance","title":"Features - Multi-Platform Support: Get detailed information about the platform your code is running on, across different environments. - Seamless Integration: Easily integrate with your existing Kotlin Multiplatform projects. - Up-to-Date Insights: Stay informed with the latest platform information to ensure compatibility and optimal performance.","text":""},{"location":"blog/","title":"Blog","text":""}]}