{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Xenoglot","text":""},{"location":"#overview","title":"Overview","text":"<p>Xenoglot: A Comprehensive Language Data Management Toolkit</p> <p>Xenoglot is a comprehensive library for representing, managing, and interacting with language data. It provides a rich set of classes and interfaces for representing languages, dialects, scripts, language families, and regions. The library also includes methods for obtaining language tags, checking language usage patterns, and territorializing languages. Xenoglot is essential for any project that requires accurate and consistent handling of language data.</p> <p>Key Features</p> <ul> <li> <p>Comprehensive Language Representation: Xenoglot provides a structured representation of   languages, dialects, scripts, language families, and regions, enabling accurate and consistent   handling of language data.</p> </li> <li> <p>Language Tag Generation: Xenoglot provides methods for generating language tags, facilitating   interoperability with language-related protocols and standards.</p> </li> <li> <p>Language Usage Analysis: Xenoglot includes methods for checking language usage patterns,   enabling informed decisions about language selection and content localization.</p> </li> <li> <p>Language Territorialization: Xenoglot provides functionality for territorializing languages,   adapting them to specific geographical or political contexts.</p> </li> </ul> <p>Kotlin Multiplatform Support</p> <p>Xenoglot is designed to work across various platforms through Kotlin Multiplatform, allowing you to use it in JVM, Android, JavaScript, iOS, macOS, Linux, tvOS, and watchOS environments. Here are some of the supported targets:</p> <ul> <li>JVM: Supports Java Virtual Machine with Kotlin configured for JDK 11.</li> <li>Android: Configured to publish all library variants.</li> <li>JavaScript: Supports WebAssembly (WASM) and JavaScript IR, including browser and Node.js environments, and generates TypeScript definitions.</li> <li>iOS: Supports iOS devices and simulators, including <code>iosX64</code>, <code>iosArm64</code>, and <code>iosSimulatorArm64</code>.</li> <li>macOS: Supports macOS with <code>macosX64</code> and <code>macosArm64</code>.</li> <li>Linux: Supports Linux with <code>linuxX64</code> and <code>linuxArm64</code>.</li> <li>tvOS: Supports tvOS devices and simulators, including <code>tvosX64</code>, <code>tvosArm64</code>, and <code>tvosSimulatorArm64</code>.</li> <li>watchOS: Supports watchOS devices and simulators, including <code>watchosX64</code>, <code>watchosArm32</code>, <code>watchosArm64</code>, <code>watchosDeviceArm64</code>, and <code>watchosSimulatorArm64</code>.</li> </ul>"},{"location":"#getting-started-with-xenoglot","title":"Getting Started with Xenoglot","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding Xenoglot dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.</p>"},{"location":"#adding-xenoglot-dependencies-manually","title":"Adding Xenoglot Dependencies Manually","text":"<p>To use Xenoglot in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorXenoglot = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.xenoglot:android:$teogorXenoglot\"\n    implementation \"dev.teogor.xenoglot:bom:$teogorXenoglot\"\n    implementation \"dev.teogor.xenoglot:core:$teogorXenoglot\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorXenoglot = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.xenoglot:android:$teogorXenoglot\")\n    implementation(\"dev.teogor.xenoglot:bom:$teogorXenoglot\")\n    implementation(\"dev.teogor.xenoglot:core:$teogorXenoglot\")\n}\n</code></pre>"},{"location":"#managing-xenoglot-versions-with-version-catalog-recommended","title":"Managing Xenoglot Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of Xenoglot dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-xenoglot = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-xenoglot-android = { group = \"dev.teogor.xenoglot\", name = \"android\", version.ref = \"teogor-xenoglot\" }\nteogor-xenoglot-bom = { group = \"dev.teogor.xenoglot\", name = \"bom\", version.ref = \"teogor-xenoglot\" }\nteogor-xenoglot-core = { group = \"dev.teogor.xenoglot\", name = \"core\", version.ref = \"teogor-xenoglot\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-xenoglot = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-xenoglot-android = { module = \"dev.teogor.xenoglot:android\", version.ref = \"teogor-xenoglot\" }\nteogor-xenoglot-bom = { module = \"dev.teogor.xenoglot:bom\", version.ref = \"teogor-xenoglot\" }\nteogor-xenoglot-core = { module = \"dev.teogor.xenoglot:core\", version.ref = \"teogor-xenoglot\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation libs.teogor.xenoglot.android\n    implementation libs.teogor.xenoglot.bom\n    implementation libs.teogor.xenoglot.core\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(libs.teogor.xenoglot.android)\n    implementation(libs.teogor.xenoglot.bom)\n    implementation(libs.teogor.xenoglot.core)\n}\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>The following examples demonstrate how to use Xenoglot to represent and interact with language data:</p>"},{"location":"#retrieving-language-information","title":"Retrieving Language Information","text":"<pre><code>val language = Language.English\nval languageTag = language.languageTag\nval languageFamily = language.languageFamily\nval isSpokenInRomania = language.isSpokenIn(Country.Romania)\n</code></pre>"},{"location":"#checking-language-usage-patterns","title":"Checking Language Usage Patterns","text":"<pre><code>val isDialect = Dialect(\"en-US\", Language.English).isDialect\nval isScriptUsedInLanguage = Script.Cyrillic.isWrittenIn(Language.Russian)\n</code></pre>"},{"location":"#territorializing-languages","title":"Territorializing Languages","text":"<pre><code>val dialect = Language.English.territorialize(Country.Australia)\nval dialectLanguageTag = dialect.languageTag\nval dialectCountryCode = dialect.country.code\n</code></pre>"},{"location":"#benefits-of-using-xenoglot","title":"Benefits of Using Xenoglot","text":"<ul> <li> <p>Improved Language Handling: Xenoglot provides a consistent and structured approach to managing   language data, reducing errors and inconsistencies.</p> </li> <li> <p>Enhanced Interoperability: Xenoglot facilitates interoperability with language-related   protocols and standards, enabling seamless integration with external systems.</p> </li> <li> <p>Simplified Language-Related Tasks: Xenoglot streamlines language-related tasks, such as   localization, translation, and language detection.</p> </li> <li> <p>Promote Language-Aware Development: Xenoglot encourages language-aware development practices,   ensuring that language data is handled accurately and appropriately.</p> </li> </ul>"},{"location":"#pluralization-support","title":"Pluralization Support","text":"<p>The <code>xenoglot-pluralization</code> module offers comprehensive support for pluralization, allowing you to manage and format strings based on quantities. This feature helps in correctly displaying text for different numbers of items, adapting to various pluralization rules.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with pluralization:</p> <ol> <li>Create Plural Forms: Define templates for different plural categories (e.g., zero, one, few,    many).</li> <li>Retrieve Formatted Strings: Use methods to get the appropriate string for specific    quantities.</li> </ol> <p>Here's a brief example:</p> <pre><code>val pluralForms = createPluralForms(\n    zeroTemplate = \"No items\",\n    oneTemplate = \"One item\",\n    twoTemplate = \"Two items\",\n    fewTemplate = \"%d items\",\n    manyTemplate = \"%d items\",\n    otherTemplate = \"%d items\",\n)\n\nprintln(pluralForms.getQuantityString(5))  // Output: \"5 items\"\n</code></pre> <p>For a more detailed guide on how to use pluralization effectively, please refer to the Pluralization Module Documentation.</p>"},{"location":"#find-this-repository-useful","title":"Find this repository useful? \ud83e\ude77","text":"<ul> <li>Support it by joining stargazers for this   repository. \ud83d\udcc1</li> <li>Get notified about my new projects by following me on GitHub. \ud83d\udcbb</li> <li>Interested in sponsoring me? Support me on GitHub! \ud83e\udd1d</li> </ul>"},{"location":"pluralization-guide/","title":"Pluralization Support in Xenoglot","text":"<p>The <code>xenoglot-pluralization</code> module provides tools for handling plural forms of strings. This document offers a comprehensive overview of how to utilize these features effectively.</p>"},{"location":"pluralization-guide/#creating-plural-forms","title":"Creating Plural Forms","text":"<p>Use the <code>createPluralForms</code> function to define templates for various plural categories:</p> <pre><code>val pluralForms = createPluralForms(\n    zeroTemplate = \"No items\",\n    oneTemplate = \"One item\",\n    twoTemplate = \"Two items\",\n    fewTemplate = \"%d items\",\n    manyTemplate = \"%d items\",\n    otherTemplate = \"%d items\",\n)\n</code></pre>"},{"location":"pluralization-guide/#methods-for-retrieving-quantity-strings","title":"Methods for Retrieving Quantity Strings","text":""},{"location":"pluralization-guide/#getquantitystringquantity-int","title":"<code>getQuantityString(quantity: Int)</code>","text":"<p>Returns the formatted string for the specified quantity. Uses the \"other\" template if the quantity does not match any rule.</p> <pre><code>val result = pluralForms.getQuantityString(5)  // Example: \"5 items\"\n</code></pre>"},{"location":"pluralization-guide/#getquantitystringornullquantity-int","title":"<code>getQuantityStringOrNull(quantity: Int)</code>","text":"<p>Returns the formatted string or <code>null</code> if the quantity is not handled.</p> <pre><code>val result = pluralForms.getQuantityStringOrNull(-1)  // Example: null\n</code></pre>"},{"location":"pluralization-guide/#getquantitystringorelsequantity-int-fallback-string","title":"<code>getQuantityStringOrElse(quantity: Int, fallback: String)</code>","text":"<p>Returns the formatted string or a fallback string if the quantity is not handled.</p> <pre><code>val result = pluralForms.getQuantityStringOrElse(-1, \"Unknown\")  // Example: \"Unknown\"\n</code></pre>"},{"location":"pluralization-guide/#getquantitystringorthrowquantity-int","title":"<code>getQuantityStringOrThrow(quantity: Int)</code>","text":"<p>Returns the formatted string or throws an exception if the quantity is not handled.</p> <pre><code>val result = pluralForms.getQuantityStringOrThrow(1)  // Example: \"One item\"\n</code></pre>"},{"location":"pluralization-guide/#example-usage","title":"Example Usage","text":"<p>Here\u2019s how you can use these methods in practice:</p> <pre><code>val pluralForms = createPluralForms(\n    zeroTemplate = \"No items\",\n    oneTemplate = \"One item\",\n    twoTemplate = \"Two items\",\n    fewTemplate = \"%d items\",\n    manyTemplate = \"%d items\",\n    otherTemplate = \"%d items\",\n)\n\nprintln(pluralForms.getQuantityString(0))  // Output: \"No items\"\nprintln(pluralForms.getQuantityString(1))  // Output: \"One item\"\nprintln(pluralForms.getQuantityString(2))  // Output: \"Two items\"\nprintln(pluralForms.getQuantityString(5))  // Output: \"5 items\"\nprintln(pluralForms.getQuantityString(11)) // Output: \"11 items\"\n\nprintln(pluralForms.getQuantityStringOrNull(-1)) // Output: null\nprintln(pluralForms.getQuantityStringOrElse(-1, \"Unknown\")) // Output: \"Unknown\"\n</code></pre> <p>This module helps in managing pluralized strings effectively, ensuring accurate representation across different quantities.</p>"},{"location":"releases/","title":"Xenoglot","text":"<p>Xenoglot seamlessly masters languages and locales, empowering developers to integrate multilingual capabilities into their applications with ease.</p>"},{"location":"releases/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.xenoglot</code></li> <li><code>dev.teogor.xenoglot:android</code></li> <li><code>dev.teogor.xenoglot:core</code></li> </ul>"},{"location":"releases/#release","title":"Release","text":"Latest Update Stable Release Beta Release Alpha Release November 21, 2023 - - 1.0.0-alpha01"},{"location":"releases/#declaring-dependencies","title":"Declaring dependencies","text":"<p>To add a dependency on Xenoglot, you must add the Maven repository to your project. Read Maven's repository for more information.</p> <p>Add the dependencies for the artifacts you need in the <code>build.gradle</code> file for your app or module:</p> KotlinGroovy <pre><code>dependencies {\n  val xenoglot_version = \"1.0.0-alpha01\"\n\n  implementation(\"dev.teogor.xenoglot:core:$xenoglot_version\")\n  implementation(\"dev.teogor.xenoglot:android:$xenoglot_version\")\n\n  // or using bom\n\n  implementation(platform(\"dev.teogor.xenoglot:bom:$xenoglot_version\"))\n  implementation(\"dev.teogor.xenoglot:core\")\n  implementation(\"dev.teogor.xenoglot:android\")\n}\n</code></pre> <pre><code>dependencies {\n  def xenoglot_version = \"1.0.0-alpha01\"\n\n  implementation(\"dev.teogor.xenoglot:core:${xenoglot_version}\")\n  implementation(\"dev.teogor.xenoglot:android:${xenoglot_version}\")\n\n  // or using bom\n\n  implementation(platform(\"dev.teogor.xenoglot:bom:${xenoglot_version}\")) {\n    // Specify the artifact to resolve and re-export the dependencies from the platform BOM\n    implementation(\"dev.teogor.xenoglot:core\")\n    implementation(\"dev.teogor.xenoglot:android\")\n  }\n}\n</code></pre>"},{"location":"releases/#feedback","title":"Feedback","text":"<p>Your feedback helps make Xenoglot better. We want to know if you discover new issues or have ideas for improving this library. Before creating a new issue, please take a look at the existing ones in this library. You can add your vote to an existing issue by clicking the star button.</p> <p>Create a new issue</p>"},{"location":"releases/#version-100","title":"Version 1.0.0","text":""},{"location":"releases/#version-100-alpha01","title":"Version 1.0.0-alpha01","text":"<p>November 21, 2023</p> <p><code>dev.teogor.xenoglot:xenoglot-*:1.0.0-alpha01</code> is released. Version 1.0.0-alpha01 contains these commits.</p> <p>Initial Release \ud83c\udf8a</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Please refer to this table to see which versions of the project are currently receiving security updates:</p> Version Supported STABLE \u2705 ALPHA \u274c BETA \u274c"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability within this project, please follow these steps:</p> <ol> <li> <p>Do Not Disclose Publicly: Do not publicly disclose the vulnerability until it has been    addressed and a security release is available.</p> </li> <li> <p>Contact Us: Report the vulnerability to us by sending an email    to open-source@teogor.dev. You can encrypt sensitive information    using our PGP key to ensure the confidentiality of    the report.</p> </li> <li> <p>Provide Details: Please provide us with detailed information about the vulnerability,    including steps to reproduce, affected versions, and potential impact.</p> </li> <li> <p>Acknowledgment: We will acknowledge your report within 48 hours to confirm that we have    received it and are investigating.</p> </li> <li> <p>Resolution: Our security team will work to validate and address the vulnerability. We will    keep you informed about our progress and expected timelines for resolution.</p> </li> <li> <p>Disclosure: Once the vulnerability is fixed and a release is available, we will work with you    to determine an appropriate timeline for public disclosure. We appreciate your patience during    this process.</p> </li> </ol> <p>Thank you for helping us improve the security of our project.</p> <p>PGP key</p>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":""},{"location":"sponsor/#about-teodor-grigor","title":"About Teodor Grigor","text":"<p>As an active open-source developer, Teodor Grigor (also known as Teogor) has made significant contributions to the developer community by creating and maintaining an extensive portfolio of open-source projects and libraries, primarily focused on Android and Kotlin development. His work has had a profound impact on the development landscape, with his projects being adopted by millions of projects, software engineers, and end-users worldwide.</p>"},{"location":"sponsor/#impact-of-teodor-grigors-work","title":"Impact of Teodor Grigor's Work","text":"<p>Teodor Grigor's open-source contributions have had a significant impact on the developer community. His projects have been used by millions of developers around the world to build high-quality Android and Kotlin applications.</p>"},{"location":"sponsor/#expressing-gratitude-and-supporting-development","title":"Expressing Gratitude and Supporting Development","text":"<p>Has this library helped you streamline your development process and reduce costs? If so, consider expressing your gratitude and supporting the developer's efforts through the provided sponsorship links below.</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Your support is crucial for the ongoing development and enhancement of this library, ensuring it remains a valuable asset for the community. By contributing, you not only express your appreciation but also actively participate in the growth and success of open-source projects like this one. Join us in making a positive impact on the developer's efforts and the future of this project.</p>"},{"location":"sponsor/#contact-teodor-grigor","title":"Contact Teodor Grigor","text":"<p>If you have suggestions for feature requests or would like to explore sponsorship opportunities, please contact the author using the following details:</p> <ul> <li>open-source@teogor.dev</li> <li>LinkedIn</li> <li>Instagram</li> <li>X (formerly known as Twitter)</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Show your support by being the first sponsor of this library!</p>"},{"location":"sponsor/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Your support is crucial for the ongoing development and enhancement of this library. By becoming a sponsor, you can help us:</p> <ul> <li>Continue developing new features and improvements</li> <li>Maintain and update the library for compatibility with the latest technologies</li> <li>Provide timely support to users</li> </ul> <p>Show your appreciation for this valuable library and become a sponsor. Your support makes a real difference!</p> <p>Thank you for your consideration!</p>"},{"location":"bom/","title":"Using the Bill of Materials","text":"<p>The BoM Bill of Materials (BOM) lets you manage all of your BoM library versions by specifying only the BOM\u2019s version. The BOM itself has links to the stable versions of the different BoM libraries, in such a way that they work well together. When using the BOM in your app, you don't need to add any version to the BoM library dependencies themselves. When you update the BOM version, all the libraries that you're using are automatically updated to their new versions.</p> <p>To find out which BoM library versions are mapped to a specific BOM version, check out the BOM to library version mapping.</p>"},{"location":"bom/#how-do-i-use-a-different-library-version-than-whats-designated-in-the-bom","title":"How do I use a different library version than what's designated in the BOM?","text":"<p>In the <code>build.gradle</code> dependencies section, keep the import of the BOM platform. On the library dependency import, specify the desired version. For example, here's how to declare dependencies if you want to use a different version of Core, no matter what version is designated in the BOM:</p> <pre><code>dependencies {\n  // Import the BoM BOM\n  implementation platform('dev.teogor.xenoglot:bom:1.0.0-alpha01')\n\n  // Import Core library\n  implementation 'dev.teogor.xenoglot:core:1.0.0-alpha01'\n\n  // Import other BoM libraries without version numbers\n  // ..\n  implementation 'dev.teogor.xenoglot:android'\n}\n</code></pre>"},{"location":"bom/#does-the-bom-automatically-add-all-the-bom-libraries-to-my-app","title":"Does the BOM automatically add all the BoM libraries to my app?","text":"<p>No. To actually add and use BoM libraries in your app, you must declare each library as a separate dependency line in your module (app-level) Gradle file (usually <code>app/build.gradle</code>).</p> <p>Using the BOM ensures that the versions of any BoM libraries in your app are compatible, but the BOM doesn't actually add those BoM libraries to your app.</p>"},{"location":"bom/#why-is-the-bom-the-recommended-way-to-manage-bom-library-versions","title":"Why is the BOM the recommended way to manage BoM library versions?","text":"<p>Going forward, BoM libraries will be versioned independently, which means version numbers will start to be incremented at their own pace. The latest stable releases of each library are tested and guaranteed to work nicely together. However, finding the latest stable versions of each library can be difficult, and the BOM helps you to automatically use these latest versions.</p>"},{"location":"bom/#am-i-forced-to-use-the-bom","title":"Am I forced to use the BOM?","text":"<p>No. You can still choose to add each dependency version manually. However, we recommend using the BOM as it will make it easier to use all of the latest stable versions at the same time.</p>"},{"location":"bom/#does-the-bom-work-with-version-catalogs","title":"Does the BOM work with version catalogs?","text":"<p>Yes. You can include the BOM itself in the version catalog, and omit the other BoM library versions:</p> <pre><code>[libraries]\nteogor-xenoglot-bom = { group = \"dev.teogor.xenoglot\", name = \"bom\", version.ref = \"teogor-xenoglot-bom\" }\nteogor-xenoglot-android = { group = \"dev.teogor.xenoglot\", name = \"android\" }\n</code></pre> <p>Don\u2019t forget to import the BOM in your module\u2019s <code>build.gradle</code>:</p> <pre><code>dependencies {\n    val teogorXenoglotBom = platform(libs.teogor.xenoglot.bom)\n    implementation(teogorXenoglotBom)\n    androidTestImplementation(teogorXenoglotBom)\n\n    // import BoM dependencies as usual\n}\n</code></pre>"},{"location":"bom/#how-do-i-report-an-issue-or-offer-feedback-on-the-bom","title":"How do I report an issue or offer feedback on the BOM?","text":"<p>You can file issues on our issue tracker \ud83d\udd17.</p>"},{"location":"bom/bom-mapping/","title":"BOM to library version mapping","text":"<p>BOM version 1.0.0-alpha01</p> Library group BOM Versions dev.teogor.xenoglot:android 1.0.0-alpha01 dev.teogor.xenoglot:core 1.0.0-alpha01"},{"location":"bom/implementation/","title":"BoM","text":""},{"location":"bom/implementation/#getting-started-with-bom","title":"Getting Started with BoM","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding BoM dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.  </p>"},{"location":"bom/implementation/#adding-bom-dependencies-manually","title":"Adding BoM Dependencies Manually","text":"<p>To use BoM in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorXenoglotBom = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.xenoglot:android:$teogorXenoglotBom\"\n    implementation \"dev.teogor.xenoglot:bom:$teogorXenoglotBom\"\n    implementation \"dev.teogor.xenoglot:core:$teogorXenoglotBom\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorXenoglotBom = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.xenoglot:android:$teogorXenoglotBom\")\n    implementation(\"dev.teogor.xenoglot:bom:$teogorXenoglotBom\")\n    implementation(\"dev.teogor.xenoglot:core:$teogorXenoglotBom\")\n}\n</code></pre>"},{"location":"bom/implementation/#managing-bom-versions-with-version-catalog-recommended","title":"Managing BoM Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of BoM dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-xenoglot-bom = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-xenoglot-bom = { group = \"dev.teogor.xenoglot\", name = \"bom\", version.ref = \"teogor-xenoglot-bom\" }\nteogor-xenoglot-android = { group = \"dev.teogor.xenoglot\", name = \"android\" }\nteogor-xenoglot-core = { group = \"dev.teogor.xenoglot\", name = \"core\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-xenoglot-bom = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-xenoglot-bom = { module = \"dev.teogor.xenoglot:bom\", version.ref = \"teogor-xenoglot-bom\" }\nteogor-xenoglot-android = { module = \"dev.teogor.xenoglot:android\" }\nteogor-xenoglot-core = { module = \"dev.teogor.xenoglot:core\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation platform(libs.teogor.xenoglot.bom)\n    implementation libs.teogor.xenoglot.android\n    implementation libs.teogor.xenoglot.core\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(platform(libs.teogor.xenoglot.bom))\n    implementation(libs.teogor.xenoglot.android)\n    implementation(libs.teogor.xenoglot.core)\n}\n</code></pre>"},{"location":"releases/","title":"Xenoglot","text":"<p>Learn more: User Guide and Code Samples</p> <p>\\uD83C\\uDF0D Xenoglot seamlessly masters languages and locales, empowering developers to integrate multilingual capabilities into their applications with ease.</p> <p>API Reference <code>dev.teogor.xenoglot:xenoglot-*</code> <code>dev.teogor.xenoglot:android</code> <code>dev.teogor.xenoglot:bom</code> <code>dev.teogor.xenoglot:core</code></p> Latest Update Stable Release Release Candidate Beta Release Alpha Release November 20, 2023 - - - 1.0.0-alpha01"},{"location":"releases/#declaring-dependencies","title":"Declaring dependencies","text":"<p>To use Xenoglot in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorXenoglot = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.xenoglot:android:$teogorXenoglot\"\n    implementation \"dev.teogor.xenoglot:bom:$teogorXenoglot\"\n    implementation \"dev.teogor.xenoglot:core:$teogorXenoglot\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorXenoglot = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.xenoglot:android:$teogorXenoglot\")\n    implementation(\"dev.teogor.xenoglot:bom:$teogorXenoglot\")\n    implementation(\"dev.teogor.xenoglot:core:$teogorXenoglot\")\n}\n</code></pre> <p>For comprehensive instructions on adding these dependencies, refer to the Xenoglot documentation.</p>"},{"location":"releases/#feedback","title":"Feedback","text":"<p>Your feedback helps make Xenoglot better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues on GitHub for this library before you create a new one.</p> <p>Create a new issue</p>"},{"location":"releases/#version-100","title":"Version 1.0.0","text":""},{"location":"releases/#version-100-alpha01","title":"Version 1.0.0-alpha01","text":"<p>November 20, 2023</p> <p><code>dev.teogor.xenoglot:xenoglot-*:1.0.0-alpha01</code> is released. Version 1.0.0-alpha01 contains these commits</p> <p>\ud83c\udf8a **Initial Release** \ud83c\udf8a</p>"},{"location":"releases/implementation/","title":"Implementation","text":""},{"location":"releases/implementation/#implementation","title":"Implementation","text":""},{"location":"releases/implementation/#latest-version","title":"Latest Version","text":"<p>The latest release is <code>1.0.0-alpha01</code></p>"},{"location":"releases/implementation/#bom-releases","title":"BoM Releases","text":"<p>The BoM (Bill of Materials) is the central repository for managing library versions within the Xenoglot project. It streamlines the process of tracking the latest versions of key components and dependencies, ensuring that your project remains up-to-date and compatible with the latest advancements.</p> <p>Here's a summary of the latest BoM versions:</p> Version Release Notes Release Date 1.0.0-alpha01 changelog \ud83d\udd17 18 Nov 2023"},{"location":"releases/implementation/#using-version-catalog","title":"Using Version Catalog","text":""},{"location":"releases/implementation/#declare-components","title":"Declare Components","text":"<p>This catalog provides the implementation details of Xenoglot libraries, including Build of Materials (BoM) and individual libraries, in TOML format.</p> DefaultUsing BoM gradle/libs.versions.toml<pre><code>[versions]\nxenoglot-android = \"1.0.0-alpha01\"\nxenoglot-core = \"1.0.0-alpha01\"\n\n[libraries]\nxenoglot-android = { group = \"dev.teogor.xenoglot\", name = \"android\", version.ref = \"xenoglot-android\" }\nxenoglot-core = { group = \"dev.teogor.xenoglot\", name = \"core\", version.ref = \"xenoglot-core\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nxenoglot-bom = \"1.0.0-alpha01\"\n\n[libraries]\nxenoglot-bom = { group = \"dev.teogor.xenoglot\", name = \"bom\", version.ref = \"xenoglot-bom\" }\nxenoglot-android = { group = \"dev.teogor.xenoglot\", name = \"android\" }\nxenoglot-core = { group = \"dev.teogor.xenoglot\", name = \"core\" }\n</code></pre>"},{"location":"releases/implementation/#dependencies-implementation","title":"Dependencies Implementation","text":"KotlinGroovy build.gradle.kts<pre><code>dependencies {\n  // When Using Xenoglot BoM\n  implementation(platform(libs.xenoglot.bom))\n\n  // Xenoglot Libraries\n  implementation(libs.xenoglot.android)\n  implementation(libs.xenoglot.core)\n}\n</code></pre> build.gradle<pre><code>dependencies {\n  // When Using Xenoglot BoM\n  implementation platform(libs.xenoglot.bom)\n\n  // Xenoglot Libraries\n  implementation(libs.xenoglot.android)\n  implementation(libs.xenoglot.core)\n}\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}