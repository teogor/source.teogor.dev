{
  "config": {
    "lang": ["en"],
    "separator": "[\\s\\-]+",
    "pipeline": ["stopWordFilter"]
  },
  "docs": [
    { "location": "", "title": "Overview", "text": "" },
    {
      "location": "#querent",
      "title": "Querent \ud83c\udfd7\ufe0f",
      "text": "<p>Querent lays the groundwork for your project's resource management, fostering consistency and efficiency across your development workflow. It automates the generation of resource files based on your project's configuration, saving you time and effort while ensuring that your resources are always up-to-date.</p>"
    },
    {
      "location": "#existing-implementations",
      "title": "Existing Implementations",
      "text": "<p>Querent currently provides three built-in plugins for generating resource files:</p> <ol> <li> <p>BuildProfile: Generates code for build profiles, which are sets of properties that define how a project is built.</p> </li> <li> <p>XmlResources: Generates XML resource files for various Android resources, such as strings, layouts, and drawables.</p> </li> <li> <p>LanguagesSchema: Generates code for languages schemas, which define the supported languages for your project and the rules for generating localized resources.</p> </li> </ol>"
    },
    {
      "location": "#creating-custom-plugins",
      "title": "Creating Custom Plugins",
      "text": "<p>Querent's extensible architecture allows you to create your own custom plugins for generating any type of resource file you need. To create a custom plugin, you'll need to follow these steps:</p> <ol> <li> <p>Create a Blueprint class: Define a class that extends the <code>Blueprint</code> class and implements the <code>onCreate()</code> method. The <code>onCreate()</code> method is where you'll write the code for generating your custom resource files.</p> </li> <li> <p>Register your plugin: Use the <code>initializePlugin()</code> extension method to register your plugin with Querent. This will make your plugin available for use in your project's build configuration.</p> </li> </ol>"
    },
    {
      "location": "#example-usage",
      "title": "Example Usage",
      "text": "<p>Here's a step-by-step guide on how to apply the Querent plugin to your project:</p> <p>1. Add the Querent Plugin to Your Project's Build.gradle File</p> <p>In your project's build.gradle.kts file, add the following line to the <code>plugins</code> block:</p> Groovy <pre><code>plugins {\n  id 'dev.teogor.querent' apply false\n}\n</code></pre> KTS <pre><code>plugins {\n  id(\"dev.teogor.querent\") apply false\n}\n</code></pre> <p>This line tells Gradle to apply the Querent plugin to your project.</p> <p>2. Apply the Querent Plugin to Your Build Configuration</p> <p>In your project's build.gradle.kts file, apply the Querent plugin to your build configuration. For example, if you're building an Android app, you would add the following line to the <code>android</code> block:</p> <pre><code>plugins {\n  id(\"dev.teogor.querent\")\n}\n</code></pre> <p>3. Configure Querent</p> <p>You can configure Querent by adding a <code>querent</code> block to your build configuration. For example, the following code enables all three of the built-in plugins and configures the languages schema plugin to support several languages:</p> <pre><code>querent {\n  buildFeatures {\n    buildProfile = true\n    xmlResources = true\n    languagesSchema = true\n  }\n\n  languagesSchemaOptions {\n    unqualifiedResLocale = Language.English territorialize Country.UnitedStates\n    addSupportedLanguages {\n      +(Language.Romanian territorialize Country.Romania)\n      +(Language.English territorialize Country.UnitedKingdom)\n      +(Language.Korean territorialize Country.SouthKorea)\n      +(Language.Dutch territorialize Country.Netherlands)\n      +(Language.German territorialize Country.Germany)\n      +(Language.Chinese territorialize Country.China)\n      +Language.Japanese\n      +Language.Spanish\n      +Language.Hindi\n      +Language.Arabic\n    }\n  }\n}\n</code></pre> <p>This configuration will generate build profiles, XML resource files, and code for the supported languages.</p>"
    },
    {
      "location": "#building-with-querent",
      "title": "Building with Querent",
      "text": "<p>To build your project with Querent, simply apply the plugin to your project and run the <code>gradle build</code> command. Querent will automatically generate the resource files for your project.</p>"
    },
    {
      "location": "#benefits-of-using-querent",
      "title": "Benefits of Using Querent",
      "text": "<p>Querent offers several benefits for developers, including:</p> <ul> <li> <p>Saves time and effort: Querent automates the generation of resource files, saving you time and effort that you can spend on other development tasks.</p> </li> <li> <p>Ensures consistency: Querent generates resource files based on your project's configuration, ensuring that your resources are always consistent.</p> </li> <li> <p>Reduces manual errors: Querent eliminates the need for manual resource file creation, reducing the risk of errors.</p> </li> <li> <p>Extensible architecture: Querent's extensible architecture allows you to create your own custom plugins for generating any type of resource file you need.</p> </li> <li> <p>Improved developer experience: Querent makes it easier to manage and maintain your project's resources, improving the overall developer experience.</p> </li> </ul> <p>Whether you're building a new project or maintaining an existing one, Querent can help you streamline your resource management process and save you time and effort.</p>"
    },
    {
      "location": "api-documentation/",
      "title": "API Documentation",
      "text": ""
    },
    {
      "location": "api-documentation/#api-documentation",
      "title": "API Documentation",
      "text": "<p>Welcome to the documentation for our project. Below are links to the generated documentation for different modules:</p> <ul> <li>API</li> <li>Plugin</li> </ul> <p>Feel free to explore the documentation for each module to understand the project's structure, API, and usage.</p> <p>If you encounter any issues or have questions, please refer to the GitHub Issues page.</p> <p>Happy coding!</p>"
    },
    {
      "location": "sponsor/",
      "title": "Sponsor \ud83e\ude77",
      "text": "<p>Jaewoong has created and contributed more than +70 open-source projects and libraries related to Android and Kotlin. With over his open-source projects and libraries, his work has left a significant impact on the development landscape. These projects have been widely embraced by millions of projects, software engineers, and end-users worldwide, with prominent organizations like PayPal, Twitter, Wikipedia, and others benefiting from their creations.</p> <p>If your team or personal projects have benefited from reduced development costs by using this library, you can show your appreciation and support by sponsoring him through the links below:</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Sponsoring helps sustain the continuous development and improvement of the library, ensuring that it remains a valuable resource for the community. Your contribution not only shows gratitude but also contributes to the growth and success of open-source projects like this one. Feel free to lend your support and make a positive impact on the developer's efforts.</p> <p>If you want to suggest a feature request or sponsorship collaboration, you can reach out to the auther with the contacts below:</p> <ul> <li>skydoves2@gmail.com</li> <li>Twitter</li> </ul>"
    },
    {
      "location": "sponsor/#sponsors",
      "title": "Sponsors",
      "text": "<p>Be the first sponsor for this library!</p>"
    }
  ]
}
