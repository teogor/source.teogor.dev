{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde9 Sudoklify \ud83e\udde9","text":""},{"location":"#overview","title":"Overview","text":""},{"location":"#a-powerful-sudoku-puzzle-generation-library","title":"A Powerful Sudoku Puzzle Generation Library","text":"<p>\ud83e\udde9 Sudoklify is a versatile and intuitive Sudoku puzzle generation library written in Kotlin. It provides a comprehensive set of tools and algorithms for generating Sudoku puzzles of various grid sizes and difficulty levels.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Efficient and customizable Sudoku puzzle generation algorithms \u2728</li> <li>Support for different grid sizes, including 4x4, 9x9, 16x16, and more \ud83d\udcd0</li> <li>Multiple difficulty levels - Easy, Medium, Hard, and Expert \ud83c\udf1f</li> <li>Flexible token mapping system for personalized puzzle representation \ud83c\udfa8</li> <li>Intuitive API for puzzle generation, population, and solution retrieval \ud83e\udde9</li> <li>Randomization techniques for puzzle layout and digit placement \ud83d\udd00</li> <li>Kotlin Multiplatform Support: Now available for JVM, JS(IR), WASM, iOS, macOS, Linux, TVOS, and WatchOS   platforms \ud83c\udf0d</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Solver Documentation - Detailed guide on using the <code>solver</code> package, including use cases and examples.</li> </ul>"},{"location":"#sudoklify-redefining-puzzle-generation","title":"Sudoklify: Redefining Puzzle Generation","text":"<p>Sudoklify reimagines the way Sudoku puzzles are generated, delivering a lightning-fast experience without compromising quality. Here's a glimpse into what makes Sudoklify stand out:</p>"},{"location":"#innovative-puzzle-creation","title":"Innovative Puzzle Creation","text":"<p>Traditional Sudoku generators rely on gradually removing numbers from a solved grid, often requiring extensive time and backend resources. Sudoklify, however, operates differently. It starts with a solvable \"seed\" puzzle and applies a series of ingenious transformations to craft new puzzles. This approach ensures rapid puzzle creation without the need for a complex backend infrastructure.</p>"},{"location":"#unparalleled-puzzle-diversity","title":"Unparalleled Puzzle Diversity","text":"<p>Every seed used by Sudoklify unlocks a staggering number of unique puzzles\u2014over 2.4 trillion! To put this into perspective, if you were to solve a puzzle every 3 minutes, it would take more than 13 million lifetimes to exhaust a single seed. \ud83c\udf89</p>"},{"location":"#transformative-algorithms-at-play","title":"Transformative Algorithms at Play","text":"<p>Sudoklify leverages a diverse set of transformations to create distinctive puzzles:</p> <ul> <li>Board Rotation: Incorporates four permutations (0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0).</li> <li>Column Stacks Shuffle: Features six permutations (3!).</li> <li>Row Bands Shuffle: Offers another six permutations (3!).</li> <li>Column Shuffle: Provides a whopping 216 permutations (3! x 3! x 3!).</li> <li>Row Shuffle: Adds another 216 permutations (3! x 3! x 3!).</li> <li>Number Swapping: Introduces an incredible 362,880 permutations (9!).</li> </ul> <p>Combining these transformations results in a staggering number of permutations per seed\u20142,437,996,216,320. This extensive variety guarantees that each puzzle is a uniquely captivating challenge. \ud83e\udde0\ud83e\udde9\ud83d\ude80</p>"},{"location":"#kotlin-multiplatform-support","title":"Kotlin Multiplatform Support","text":"<p>Sudoklify is now available as a Kotlin Multiplatform project, supporting the following platforms:</p> <ul> <li>JVM: Full support for JVM with Kotlin toolchain version 11.</li> <li>JavaScript (JS): Supports both browser and Node.js environments using Kotlin/JS IR backend.</li> <li>WASM: WebAssembly support for browser and Node.js environments.</li> <li>iOS: Native support for iOS devices, including x64, Arm64, and Simulator Arm64.</li> <li>macOS: Native support for macOS devices, including x64 and Arm64.</li> <li>Linux: Native support for Linux devices, including x64 and Arm64.</li> <li>TVOS: Native support for tvOS devices, including x64, Arm64, and Simulator Arm64.</li> <li>WatchOS: Native support for watchOS devices, including x64, Arm32, Arm64, Device Arm64, and   Simulator Arm64.</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>To generate Sudoku puzzles using Sudoklify, follow these steps:</p> <ol> <li>Initialize the Architect: Start by creating a <code>SudoklifyArchitect</code> instance. This allows you    to load preset schemas and optionally add your own custom schemas.</li> </ol> <pre><code>val architect = SudoklifyArchitect {\n    SudokuSchemas(loadPresetSchemas()) {\n        // TODO Optional: Add own schemas using add(*), addAll(*)\n    }\n}\n</code></pre> <ol> <li>Define the Sudoku Specification: Create a <code>SudokuSpec</code> to specify the puzzle's seed, grid    dimension, and difficulty level.</li> </ol> <pre><code>val sudokuSpec = SudokuSpec {\n  seed = 2024L.toSeed()\n  type = Dimension.NineByNine\n  difficulty = Difficulty.EASY\n}\n</code></pre> <ol> <li>Generate Sudoku Puzzles: Use the <code>SudoklifyArchitect</code> to construct Sudoku puzzles based on    the defined specifications.</li> </ol> <pre><code>val sudokuPuzzle1 = architect.constructSudoku(sudokuSpec)\nval sudokuPuzzle2 = architect.constructSudoku {\n  seed = 2025L.toSeed()\n}\n</code></pre> <ol> <li>Process and Print the Puzzles: Iterate through the generated puzzles and print their grids.</li> </ol> <pre><code>val puzzles = listOf(sudokuPuzzle1, sudokuPuzzle2)\npuzzles.forEach { puzzle -&gt;\n  println(puzzle.generateGridWithGivens().mapToSudokuString())\n  println(puzzle.generateGridWithGivens().mapToSudokuString().mapToSudokuBoard(puzzle.type))\n}\n</code></pre>"},{"location":"#getting-started-with-sudoklify","title":"Getting Started with Sudoklify","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding Sudoklify dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.</p>"},{"location":"#adding-sudoklify-dependencies-manually","title":"Adding Sudoklify Dependencies Manually","text":"<p>To use Sudoklify in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorSudoklify = \"1.0.0-beta04\"\n\n    implementation \"dev.teogor.sudoklify:sudoklify-common:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-core:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-io:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-presets:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-solver:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-tokenizer:$teogorSudoklify\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorSudoklify = \"1.0.0-beta04\"\n\n    implementation(\"dev.teogor.sudoklify:sudoklify-common:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-core:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-io:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-presets:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-solver:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-tokenizer:$teogorSudoklify\")\n}\n</code></pre>"},{"location":"#managing-sudoklify-versions-with-version-catalog-recommended","title":"Managing Sudoklify Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of Sudoklify dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-sudoklify = \"1.0.0-beta04\"\n\n[libraries]\nteogor-sudoklify-common = { group = \"dev.teogor.sudoklify\", name = \"sudoklify-common\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-core = { group = \"dev.teogor.sudoklify\", name = \"sudoklify-core\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-io = { group = \"dev.teogor.sudoklify\", name = \"sudoklify-io\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-presets = { group = \"dev.teogor.sudoklify\", name = \"sudoklify-presets\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-solver = { group = \"dev.teogor.sudoklify\", name = \"sudoklify-solver\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-tokenizer = { group = \"dev.teogor.sudoklify\", name = \"sudoklify-tokenizer\", version.ref = \"teogor-sudoklify\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-sudoklify = \"1.0.0-beta04\"\n\n[libraries]\nteogor-sudoklify-common = { module = \"dev.teogor.sudoklify:sudoklify-common\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-core = { module = \"dev.teogor.sudoklify:sudoklify-core\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-io = { module = \"dev.teogor.sudoklify:sudoklify-io\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-presets = { module = \"dev.teogor.sudoklify:sudoklify-presets\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-solver = { module = \"dev.teogor.sudoklify:sudoklify-solver\", version.ref = \"teogor-sudoklify\" }\nteogor-sudoklify-tokenizer = { module = \"dev.teogor.sudoklify:sudoklify-tokenizer\", version.ref = \"teogor-sudoklify\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation libs.teogor.sudoklify.common\n    implementation libs.teogor.sudoklify.core\n    implementation libs.teogor.sudoklify.io\n    implementation libs.teogor.sudoklify.presets\n    implementation libs.teogor.sudoklify.solver\n    implementation libs.teogor.sudoklify.tokenizer\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(libs.teogor.sudoklify.common)\n    implementation(libs.teogor.sudoklify.core)\n    implementation(libs.teogor.sudoklify.io)\n    implementation(libs.teogor.sudoklify.presets)\n    implementation(libs.teogor.sudoklify.solver)\n    implementation(libs.teogor.sudoklify.tokenizer)\n}\n</code></pre>"},{"location":"#find-this-repository-useful","title":"Find this repository useful? \ud83e\ude77","text":"<ul> <li>Support it by joining stargazers for this   repository. \ud83d\udcc1</li> <li>Get notified about my new projects by following me on GitHub. \ud83d\udcbb</li> <li>Interested in sponsoring me? Support me on GitHub! \ud83e\udd1d</li> </ul>"},{"location":"#license","title":"License","text":"<pre><code>  Designed and developed by 2023 teogor (Teodor Grigor)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n</code></pre>"},{"location":"dimension/","title":"Sudoku Dimension Documentation","text":"<p>This document provides an in-depth overview of the <code>Dimension</code> class within the <code>dev.teogor.sudoklify.components</code> package. This class is essential for representing various Sudoku puzzle sizes and their associated properties.</p>"},{"location":"dimension/#key-features","title":"Key Features","text":"<ul> <li> <p>Encapsulated Grid Size: The <code>Dimension</code> class encapsulates grid size information through its   <code>gridSize</code> property, including the grid's <code>width</code> and <code>height</code>. This encapsulation ensures clarity   and consistency when representing different Sudoku variants.</p> </li> <li> <p>Derived Properties: The class provides convenient access to several derived properties based   on the grid size, such as:</p> </li> <li><code>uniqueDigitsCount</code>: Total number of distinct digits.</li> <li><code>totalCells</code>: Total number of cells in the grid.</li> <li><code>isSquare</code>: Indicates if the grid is square.</li> <li> <p><code>width</code> and <code>height</code>: Dimensions of the grid.</p> </li> <li> <p>Human-Readable Name: The <code>name</code> property provides a user-friendly representation like \"4x4\"   for easy identification of the Sudoku grid dimensions.</p> </li> <li> <p>Dedicated Objects: Predefined objects are available for common Sudoku sizes, including   <code>FourByFour</code>, <code>SixBySix</code>, <code>NineByNine</code>, and more, enabling quick access to specific grid   dimensions.</p> </li> <li> <p><code>Unspecified</code> Object: An <code>Unspecified</code> object exists to handle cases where the Sudoku size is   unknown or unspecified.</p> </li> </ul>"},{"location":"dimension/#advantages-of-using-dimension","title":"Advantages of Using <code>Dimension</code>","text":""},{"location":"dimension/#dimension-safety","title":"Dimension Safety","text":"<p>The <code>Dimension</code> class enforces correct grid size representation, preventing errors or unexpected behavior in Sudoku applications.</p>"},{"location":"dimension/#clarity-and-maintainability","title":"Clarity and Maintainability","text":"<p>This class improves code readability and simplifies maintenance by providing well-defined types and properties.</p>"},{"location":"dimension/#flexibility","title":"Flexibility","text":"<p>The class supports various Sudoku sizes while ensuring consistency and ease of use, accommodating custom and standard grid dimensions.</p>"},{"location":"dimension/#using-the-dimension-class","title":"Using the <code>Dimension</code> Class","text":""},{"location":"dimension/#accessing-predefined-objects","title":"Accessing Predefined Objects","text":"<p>Utilize predefined objects like <code>FourByFour</code> or <code>NineByNine</code> for standard Sudoku grid sizes:</p> <pre><code>val puzzle4x4: Dimension = Dimension.FourByFour\nval puzzle9x9: Dimension = Dimension.NineByNine\n</code></pre>"},{"location":"dimension/#creating-custom-dimensions","title":"Creating Custom Dimensions","text":"<p>For unsupported sizes, create a new instance using the <code>GridSize</code> constructor:</p> <pre><code>val customSize: Dimension = Dimension(GridSize(5, 8))\nprintln(\"Custom Sudoku size: ${customSize}\")\n</code></pre>"},{"location":"dimension/#accessing-dimension-properties","title":"Accessing <code>Dimension</code> Properties","text":"<p>The <code>Dimension</code> class provides a range of properties to access grid-related information.</p>"},{"location":"dimension/#1-dimensionwidth-and-dimensionheight","title":"1. <code>Dimension.width</code> and <code>Dimension.height</code>","text":"<p>These properties represent the grid's dimensions:</p> <ul> <li>Example:</li> </ul> <pre><code>val puzzleSize = Dimension.SixBySix\nprintln(\"Grid size: ${puzzleSize.width}x${puzzleSize.height}\") // Output: Grid size: 6x6\n</code></pre>"},{"location":"dimension/#2-dimensionuniquedigitscount","title":"2. <code>Dimension.uniqueDigitsCount</code>","text":"<p>This property provides the total number of unique digits in the Sudoku grid:</p> <ul> <li>Example:</li> </ul> <pre><code>val puzzleDigits = Dimension.NineByNine.uniqueDigitsCount\nprintln(\"Total unique digits: $puzzleDigits\") // Output: Total unique digits: 81\n</code></pre>"},{"location":"dimension/#3-dimensiontotalcells","title":"3. <code>Dimension.totalCells</code>","text":"<p>This property returns the total number of cells in the grid:</p> <ul> <li>Example:</li> </ul> <pre><code>val puzzle = Dimension.NineByNine\n\nfor (cellIndex in 0..&lt;puzzle.totalCells) {\n  println(\"Processing cell: $cellIndex\")\n}\n</code></pre>"},{"location":"dimension/#4-dimensionissquare","title":"4. <code>Dimension.isSquare</code>","text":"<p>This boolean property indicates whether the grid is square:</p> <ul> <li>Example:</li> </ul> <pre><code>val isSquareSudoku = Dimension.FourByFour.isSquare\nprintln(\"Is square: $isSquareSudoku\") // Output: Is square: true\n</code></pre>"},{"location":"dimension/#5-dimensionboxwidth-and-dimensionboxheight","title":"5. <code>Dimension.boxWidth</code> and <code>Dimension.boxHeight</code>","text":"<p>These properties represent the dimensions of a single box within the grid:</p> <ul> <li>Example:</li> </ul> <pre><code>val puzzle = Dimension.NineByNine\nval boxWidth = puzzle.boxWidth\nval boxHeight = puzzle.boxHeight\nprintln(\"Box size: ${boxWidth}x${boxHeight}\") // Output: Box size: 3x3\n</code></pre>"},{"location":"dimension/#6-dimensionname","title":"6. <code>Dimension.name</code>","text":"<p>This property provides a human-readable name for the Sudoku dimension:</p> <ul> <li>Example:</li> </ul> <pre><code>val sudokuName = Dimension.SixteenBySixteen.name\nprintln(\"Sudoku name: $sudokuName\") // Output: Sudoku name: 16x16\n</code></pre>"},{"location":"dimension/#working-with-sudoku-types","title":"Working with Sudoku Types","text":""},{"location":"dimension/#grid-analysis-extensions","title":"Grid Analysis Extensions","text":"<p>The <code>Dimension</code> class provides several methods to analyze the grid structure.</p> <ul> <li><code>getAllDigits()</code>: Returns the valid range of digits (1 to <code>uniqueDigitsCount</code>).</li> <li><code>isDigitValid(digit: Int)</code>: Checks if a given digit is valid within the Sudoku's range.</li> </ul>"},{"location":"dimension/#accessing-cell-information","title":"Accessing Cell Information","text":"<ul> <li><code>getCellRowIndex(cellIndex: Int)</code>: Returns the row index for a given cell.</li> <li><code>getCellColumnIndex(cellIndex: Int)</code>: Returns the column index for a given cell.</li> </ul>"},{"location":"dimension/#working-with-boxes","title":"Working with Boxes","text":"<ul> <li><code>getBoxIndex(row: Int, col: Int)</code>: Returns the box index for a cell at a specific row and   column.</li> <li><code>getBoxCoordinates(row: Int, col: Int)</code>: Returns the coordinates of the top-left and   bottom-right corners of the box containing a cell.</li> </ul>"},{"location":"dimension/#cell-relationships","title":"Cell Relationships","text":"<ul> <li><code>areCellsInSameRow(cellIndex1: Int, cellIndex2: Int)</code>: Checks if two cells share the same row.</li> <li><code>areCellsInSameColumn(cellIndex1: Int, cellIndex2: Int)</code>: Checks if two cells share the same   column.</li> <li><code>areCellsInSameBox(cellIndex1: Int, cellIndex2: Int)</code>: Checks if two cells are in the same   box.</li> <li><code>areCellsRelated(row1: Int, col1: Int, row2: Int, col2: Int)</code>: Checks if two cells are   related (in the same row, column, or box).</li> </ul>"},{"location":"dimension/#references","title":"References","text":"<ul> <li>Source code for <code>Dimension</code> class</li> <li>API documentation for <code>Dimension</code> class</li> <li>Full <code>sudoklify</code> library documentation</li> </ul>"},{"location":"j-encoding-for-sudoku-cells/","title":"J-Encoding for Sudoku Cells","text":"<p>This document explains the algorithm used for encoding and decoding cell values in a Sudoku board, ensuring a concise and human-readable representation.</p>"},{"location":"j-encoding-for-sudoku-cells/#algorithm-overview","title":"Algorithm Overview","text":"<p>The algorithm employs a base-10 encoding scheme with specific mappings for digits:</p> <ul> <li>Digits 1-9: Represented by lowercase letters 'a' to 'i'.</li> <li>Digit 0: Represented by the letter 'j'.</li> </ul> <p>Key characteristics</p> <ul> <li>Initial Letter Capitalization: The first letter in the encoded string is capitalized to   enhance readability and differentiation.</li> <li>Zero Handling: The value 0 is represented by a hyphen (-) for clarity and consistency.</li> </ul>"},{"location":"j-encoding-for-sudoku-cells/#encoding-process","title":"Encoding Process","text":"<ol> <li>Convert to String: The integer representing the cell value is transformed into a string of    digits.</li> <li>Map Digits to Letters: Each digit is replaced with its corresponding letter (a to i for 1 to    9, j for 0).</li> <li>Capitalize First Letter: The first letter in the string is capitalized.</li> <li>Return Encoded String: The resulting string is the encoded JEncodedCell representation.</li> </ol>"},{"location":"j-encoding-for-sudoku-cells/#decoding-process","title":"Decoding Process","text":"<ol> <li>Map Letters to Digits: Each letter in the encoded string is mapped back to its corresponding    digit (a to i to 1 to 9, j to 0).</li> <li>Handle Capitalization: If the first letter is uppercase, it's converted to lowercase before    mapping.</li> <li>Combine Digits: The mapped digits are joined to form an integer.</li> <li>Return Decoded Integer: The integer is the decoded cell value.</li> </ol>"},{"location":"j-encoding-for-sudoku-cells/#example","title":"Example","text":""},{"location":"j-encoding-for-sudoku-cells/#encoding","title":"Encoding","text":"<ul> <li>Input: Integer <code>230</code></li> <li>Steps:</li> <li>Convert to string: <code>'2', '3', '0'</code></li> <li>Map digits: <code>'b', 'c', 'j'</code></li> <li>Uppercase first: <code>'B', 'c', 'j'</code></li> <li>Output: String <code>\"Bcj\"</code></li> </ul>"},{"location":"j-encoding-for-sudoku-cells/#decoding","title":"Decoding","text":"<ul> <li>Input: String <code>\"Bcj\"</code></li> <li>Steps:</li> <li>Split into characters: <code>'B', 'c', 'j'</code></li> <li>Map letters: <code>2, 3, 0</code></li> <li>Join digits: <code>230</code></li> <li>Output: Integer <code>230</code></li> </ul>"},{"location":"j-encoding-for-sudoku-cells/#code-implementation","title":"Code Implementation","text":"<p>The algorithm is implemented in Kotlin as extension functions for the <code>Int</code> and <code>JEncodedCell</code> types, as shown in the provided code snippet.</p>"},{"location":"j-encoding-for-sudoku-cells/#motivation","title":"Motivation","text":"<p>This algorithm aims to create a compact and human-friendly representation of cell values in Sudoku boards, enhancing readability and understanding for both developers and users.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#reference","title":"Reference","text":"<p>Welcome to the comprehensive API documentation for our project, meticulously crafted to empower you to effectively utilize its capabilities. This guide provides detailed information about the project's structure, API, and usage, enabling you to navigate the project with ease and unlock its full potential.</p>"},{"location":"reference/#project-overview","title":"Project Overview","text":"<p>Our project encompasses a suite of modules, each designed to address specific functionalities and enhance the overall developer experience. To delve into the intricacies of each module, refer to the dedicated documentation pages:</p>"},{"location":"reference/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.sudoklify</code></li> <li><code>dev.teogor.sudoklify:sudoklify-common</code></li> <li><code>dev.teogor.sudoklify:sudoklify-core</code></li> <li><code>dev.teogor.sudoklify:sudoklify-ktx</code></li> <li><code>dev.teogor.sudoklify:sudoklify-seeds</code></li> </ul>"},{"location":"reference/#contributions-and-support","title":"Contributions and Support","text":"<p>We welcome your valuable feedback and contributions to the project. Your insights are crucial for shaping the project's future and ensuring it continues to meet the needs of our community. If you encounter any issues or have questions, please feel free to raise them on the GitHub Issues \ud83d\udd17 page. Our team is dedicated to assisting you and continuously improving the project's overall quality.</p>"},{"location":"reference/#embark-on-your-coding-journey","title":"Embark on Your Coding Journey","text":"<p>With this extensive documentation as your guide, you are now well-equipped to embark on your coding journey with our project. We hope you find the documentation informative and helpful as you explore the project's capabilities and bring your ideas to life.</p> <p>Happy coding!</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Please refer to this table to see which versions of the project are currently receiving security updates:</p> Version Supported STABLE \u2705 ALPHA \u274c BETA \u274c"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability within this project, please follow these steps:</p> <ol> <li> <p>Do Not Disclose Publicly: Do not publicly disclose the vulnerability until it has been    addressed and a security release is available.</p> </li> <li> <p>Contact Us: Report the vulnerability to us by sending an email    to open-source@teogor.dev. You can encrypt sensitive information    using our PGP key to ensure the confidentiality of    the report.</p> </li> <li> <p>Provide Details: Please provide us with detailed information about the vulnerability,    including steps to reproduce, affected versions, and potential impact.</p> </li> <li> <p>Acknowledgment: We will acknowledge your report within 48 hours to confirm that we have    received it and are investigating.</p> </li> <li> <p>Resolution: Our security team will work to validate and address the vulnerability. We will    keep you informed about our progress and expected timelines for resolution.</p> </li> <li> <p>Disclosure: Once the vulnerability is fixed and a release is available, we will work with you    to determine an appropriate timeline for public disclosure. We appreciate your patience during    this process.</p> </li> </ol> <p>Thank you for helping us improve the security of our project.</p> <p>PGP key</p>"},{"location":"seed/","title":"Managing Randomness for Sudoku Generation","text":"<p>This documentation explores the <code>Seed</code> class in the <code>sudoklify</code> library, a powerful tool for controlling and customizing the randomness of your Sudoku puzzles. <code>Seed</code> offers a safe and structured way to handle different types of seeds, ensuring reproducible and consistent puzzle generation while providing flexibility and control.</p>"},{"location":"seed/#key-benefits","title":"Key Benefits","text":"<ul> <li>Type Safety and Validation: Guarantees valid seed values, preventing errors and unexpected   behavior.</li> <li>Random vs. Explicit Seeds: Choose between randomly generated seeds for variety or specific   values for controlled puzzle creation.</li> <li>Intuitive Functions: Easily create, manipulate, and access seeds with clear and convenient   functions.</li> <li>Reproducible Puzzles: Generate consistent Sudoku grids using the same seed for sharing or   testing purposes.</li> </ul>"},{"location":"seed/#understanding-seed-types","title":"Understanding Seed Types","text":"<ul> <li><code>Random</code>: Generates a new seed based on the system's random number generator, ensuring   different puzzles each time.</li> <li><code>Explicit</code>: Allows you to specify a specific long value as the seed, enabling precise control   over the generated puzzle.</li> </ul>"},{"location":"seed/#key-features","title":"Key features","text":"<ul> <li><code>toRandom()</code> function: Converts a <code>Seed</code> object to a <code>kotlin.random.Random</code> instance.</li> <li><code>Explicit</code> constructor: Allows creation of explicit seeds with custom values.</li> <li><code>nextSeed()</code> function: Generates a new <code>Seed</code> object with an incremented value (if   applicable).</li> <li><code>copy()</code> function: Creates a copy of the <code>Seed</code> object with an optional new value.</li> <li><code>toString()</code> function: Provides a human-readable representation of the <code>Seed</code> object.</li> </ul>"},{"location":"seed/#working-with-seeds","title":"Working with Seeds","text":""},{"location":"seed/#creating-seeds","title":"Creating Seeds","text":""},{"location":"seed/#1-creating-a-random-seed","title":"1. Creating a <code>Random</code> seed","text":"<pre><code>val randomSeed: Seed = Seed.Random()\nprintln(randomSeed) // Output: RandomSeed(-7367563790280219005)\n</code></pre>"},{"location":"seed/#2-creating-an-explicit-seed","title":"2. Creating an <code>Explicit</code> seed","text":"<p>There are two ways to create an <code>Explicit</code> object:</p>"},{"location":"seed/#21-using-toseed","title":"2.1 Using <code>toSeed()</code>","text":"<p>The <code>toSeed()</code> extension function directly converts the <code>Long</code> value to an <code>ExplicitSeed</code>:</p> <pre><code>val longSeed: Long = 123\nval seedFromLong = longSeed.toSeed()\n\nprintln(seedFromLong) // Output: ExplicitSeed(123)\n</code></pre>"},{"location":"seed/#22-using-createseed","title":"2.2 Using <code>createSeed()</code>","text":"<p>The <code>createSeed()</code> function offers a more explicit way to create a <code>Seed</code>:</p> <pre><code>val longSeed: Long = 123\nval seedFromCreate = createSeed(longSeed)\n\nprintln(seedFromCreate) // Output: ExplicitSeed(123)\n</code></pre> <p>Choosing the right method:</p> <p>Both methods achieve the same outcome, so the choice depends on your preference and coding style.</p> <ul> <li><code>toSeed()</code>: More concise and convenient for direct conversion.</li> <li><code>createSeed()</code>: More explicit and readable, especially if you need additional parameters or   logic in the future.</li> </ul> <p>Additional notes:</p> <ul> <li>Remember that any negative <code>Long</code> values will trigger an exception with both methods.</li> </ul>"},{"location":"seed/#utilizing-seeds","title":"Utilizing Seeds","text":""},{"location":"seed/#1-getting-the-next-seed","title":"1. Getting the next seed","text":"<pre><code>val nextSeed = explicitSeed.nextSeed()\nprintln(nextSeed) // Output: ExplicitSeed(43)\n</code></pre>"},{"location":"seed/#2-copying-a-seed","title":"2. Copying a seed","text":"<pre><code>val copiedSeed = explicitSeed.copy(seed = 50)\nprintln(copiedSeed) // Output: ExplicitSeed(50)\n</code></pre>"},{"location":"seed/#3-creating-a-kotlinrandomrandom-instance","title":"3. Creating a <code>kotlin.random.Random</code> instance","text":"<pre><code>val randomInstance = explicitSeed.toRandom()\n</code></pre>"},{"location":"seed/#additional-notes","title":"Additional notes","text":"<ul> <li>You can use the <code>toRandom()</code> function to access the actual random number generator instance.</li> <li>Refer to the source code for further details on specific functionalities and potential exceptions.</li> </ul>"},{"location":"seed/#references","title":"References","text":"<ul> <li>Source code for <code>Seed</code> class</li> <li>API documentation for <code>Seed</code> class</li> <li>Source code for <code>SeedExtensions</code></li> <li>API documentation for <code>SeedExtensions</code></li> <li>Full <code>sudoklify</code> library documentation</li> </ul>"},{"location":"solver/","title":"Sudoklify Solver - Documentation","text":""},{"location":"solver/#overview","title":"Overview","text":"<p>Sudoklify is a powerful Kotlin library designed to assist in creating and solving Sudoku puzzles. The <code>solver</code> package provides a robust set of tools to help developers implement mistake-checking, suggest potential moves, and solve puzzles efficiently. This document outlines the key use cases of the solver package, providing practical examples to help you integrate it into your project.</p>"},{"location":"solver/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Core Components</li> <li>MistakeCheckingMode</li> <li>SudoklifyMoveAdvisor</li> <li>SudoklifySolverEngine</li> <li>SudokuGridProcessor</li> <li>SudokuMove</li> <li>Use Cases</li> <li>Checking for Mistakes</li> <li>Suggesting the Next Move</li> <li>Solving a Sudoku Puzzle</li> <li>Examples</li> <li>Basic Mistake Checking</li> <li>Move Suggestion</li> <li>Custom Grid Processor</li> <li>License</li> </ul>"},{"location":"solver/#getting-started","title":"Getting Started","text":"<p>To start using Sudoklify in your project, include the dependency in your build file:</p> <pre><code>dependencies {\n    implementation(\"dev.teogor.sudoklify:sudoklify-solver:$version\")\n}\n</code></pre>"},{"location":"solver/#core-components","title":"Core Components","text":""},{"location":"solver/#mistakecheckingmode","title":"MistakeCheckingMode","text":"<p><code>MistakeCheckingMode</code> is an enum that defines the modes for mistake checking:</p> <ul> <li><code>NoChecking</code>: Disables mistake checking.</li> <li><code>CheckViolations</code>: Checks for rule violations without comparing to the final solution.</li> <li><code>CheckAgainstSolution</code>: Compares input directly against the final solution.</li> </ul>"},{"location":"solver/#sudoklifymoveadvisor","title":"SudoklifyMoveAdvisor","text":"<p><code>SudoklifyMoveAdvisor</code> helps in suggesting the next possible move by analyzing the grid and identifying cells where only one value is possible.</p>"},{"location":"solver/#sudoklifysolverengine","title":"SudoklifySolverEngine","text":"<p><code>SudoklifySolverEngine</code> is the core engine for solving Sudoku puzzles. It combines mistake checking, move advising, and other utilities to provide a comprehensive solution for Sudoku gameplay.</p>"},{"location":"solver/#sudokugridprocessor","title":"SudokuGridProcessor","text":"<p><code>SudokuGridProcessor</code> is an interface for processing grids. It allows conversion between different cell types, checking for mistakes, and updating grids.</p>"},{"location":"solver/#sudokumove","title":"SudokuMove","text":"<p><code>SudokuMove</code> represents a move suggestion in the puzzle, indicating the row, column, and value to be placed.</p>"},{"location":"solver/#use-cases","title":"Use Cases","text":""},{"location":"solver/#checking-for-mistakes","title":"Checking for Mistakes","text":"<p>Using <code>SudoklifySolverEngine</code>, you can check for mistakes in the player's input. The engine will identify errors based on the selected <code>MistakeCheckingMode</code>.</p>"},{"location":"solver/#suggesting-the-next-move","title":"Suggesting the Next Move","text":"<p>The <code>SudoklifyMoveAdvisor</code> can suggest the next optimal move for the player, especially when they are stuck. This feature is useful for providing hints during gameplay.</p>"},{"location":"solver/#solving-a-sudoku-puzzle","title":"Solving a Sudoku Puzzle","text":"<p>The <code>SudoklifySolverEngine</code> can solve the entire puzzle based on the given grid and rules. This is particularly useful in automated testing or hint systems.</p>"},{"location":"solver/#examples","title":"Examples","text":""},{"location":"solver/#basic-mistake-checking","title":"Basic Mistake Checking","text":"<pre><code>val gridProcessor = createSudokuGridProcessor(\n    getValue = { cell -&gt; cell.value },\n    isLocked = { cell -&gt; cell.isLocked },\n    getSolution = { cell -&gt; cell.solution },\n    isError = { cell -&gt; cell.isError },\n    updateCell = { row, col, state, cell -&gt; cell.copy(isError = state.isError) }\n)\n\nval puzzle: SudokuPuzzle = // Initialize with puzzle data\n\nval solverEngine = SudoklifySolverEngine(gridProcessor, puzzle)\n\nval checkedGrid = solverEngine.processGridMistakes(currentGrid)\n</code></pre>"},{"location":"solver/#move-suggestion","title":"Move Suggestion","text":"<pre><code>val advisor = SudoklifyMoveAdvisor(dimension = puzzle.dimension)\nval nextMove = advisor.suggestNextMove(currentGrid)\n\nif (nextMove != null) {\n    println(\"Suggested move: Place ${nextMove.value} at row ${nextMove.row}, column ${nextMove.col}\")\n} else {\n    println(\"No move suggestion available.\")\n}\n</code></pre>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":""},{"location":"sponsor/#about-teodor-grigor","title":"About Teodor Grigor","text":"<p>As an active open-source developer, Teodor Grigor (also known as Teogor) has made significant contributions to the developer community by creating and maintaining an extensive portfolio of open-source projects and libraries, primarily focused on Android and Kotlin development. His work has had a profound impact on the development landscape, with his projects being adopted by millions of projects, software engineers, and end-users worldwide.</p>"},{"location":"sponsor/#impact-of-teodor-grigors-work","title":"Impact of Teodor Grigor's Work","text":"<p>Teodor Grigor's open-source contributions have had a significant impact on the developer community. His projects have been used by millions of developers around the world to build high-quality Android and Kotlin applications.</p>"},{"location":"sponsor/#expressing-gratitude-and-supporting-development","title":"Expressing Gratitude and Supporting Development","text":"<p>Has this library helped you streamline your development process and reduce costs? If so, consider expressing your gratitude and supporting the developer's efforts through the provided sponsorship links below.</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Your support is crucial for the ongoing development and enhancement of this library, ensuring it remains a valuable asset for the community. By contributing, you not only express your appreciation but also actively participate in the growth and success of open-source projects like this one. Join us in making a positive impact on the developer's efforts and the future of this project.</p>"},{"location":"sponsor/#contact-teodor-grigor","title":"Contact Teodor Grigor","text":"<p>If you have suggestions for feature requests or would like to explore sponsorship opportunities, please contact the author using the following details:</p> <ul> <li>open-source@teogor.dev</li> <li>LinkedIn</li> <li>Instagram</li> <li>X (formerly known as Twitter)</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Show your support by being the first sponsor of this library!</p>"},{"location":"sponsor/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Your support is crucial for the ongoing development and enhancement of this library. By becoming a sponsor, you can help us:</p> <ul> <li>Continue developing new features and improvements</li> <li>Maintain and update the library for compatibility with the latest technologies</li> <li>Provide timely support to users</li> </ul> <p>Show your appreciation for this valuable library and become a sponsor. Your support makes a real difference!</p> <p>Thank you for your consideration!</p>"},{"location":"releases/","title":"Sudoklify","text":"<p>Learn more: User Guide and Code Samples</p> <p>Sudoklify stands as a versatile and user-friendly Sudoku puzzle generation library crafted in Kotlin. Effortlessly generate, manipulate, and solve Sudoku puzzles with ease.</p> <p>API Reference <code>dev.teogor.sudoklify:sudoklify-*</code> <code>dev.teogor.sudoklify:sudoklify</code> <code>dev.teogor.sudoklify:sudoklify-common</code> <code>dev.teogor.sudoklify:sudoklify-core</code> <code>dev.teogor.sudoklify:sudoklify-io</code> <code>dev.teogor.sudoklify:sudoklify-presets</code> <code>dev.teogor.sudoklify:sudoklify-solver</code> <code>dev.teogor.sudoklify:sudoklify-tokenizer</code></p> Latest Update Stable Release Release Candidate Beta Release Alpha Release August 25, 2024 - - 1.0.0-beta04 -"},{"location":"releases/#declaring-dependencies","title":"Declaring dependencies","text":"<p>To use Sudoklify in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorSudoklify = \"1.0.0-beta04\"\n\n    implementation \"dev.teogor.sudoklify:sudoklify-common:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-core:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-io:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-presets:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-solver:$teogorSudoklify\"\n    implementation \"dev.teogor.sudoklify:sudoklify-tokenizer:$teogorSudoklify\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorSudoklify = \"1.0.0-beta04\"\n\n    implementation(\"dev.teogor.sudoklify:sudoklify-common:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-core:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-io:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-presets:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-solver:$teogorSudoklify\")\n    implementation(\"dev.teogor.sudoklify:sudoklify-tokenizer:$teogorSudoklify\")\n}\n</code></pre> <p>For comprehensive instructions on adding these dependencies, refer to the Sudoklify documentation.</p>"},{"location":"releases/#feedback","title":"Feedback","text":"<p>Your feedback helps make Sudoklify better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues on GitHub for this library before you create a new one.</p> <p>Create a new issue</p>"},{"location":"releases/#version-100","title":"Version 1.0.0","text":""},{"location":"releases/#version-100-beta04","title":"Version 1.0.0-beta04","text":"<p>August 25, 2024</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-beta04</code> is released. Version 1.0.0-beta04 contains these commits</p> <p>Enhancement</p> <ul> <li>Add Kotlin Multiplatform Support for JS (IR) Targeting Browser and Node.js (#72) by @teogor</li> <li>Release Sudoklify Beta Modules - Common, Core, IO, Presets, Solver, and Tokenizer (#71) by @teogor</li> </ul>"},{"location":"releases/#version-100-beta03","title":"Version 1.0.0-beta03","text":"<p>August 12, 2024</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-beta03</code> is released. Version 1.0.0-beta03 contains these commits</p> <p>Enhancement</p> <ul> <li>Convert JVM Library to Kotlin Multiplatform: Added support for JVM, WASM, iOS, macOS, Linux, TVOS, and WatchOS (#68) by @teogor</li> </ul>"},{"location":"releases/#version-100-beta02","title":"Version 1.0.0-beta02","text":"<p>March 04, 2024</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-beta02</code> is released. Version 1.0.0-beta02 contains these commits</p> <p>Enhancement</p> <ul> <li>Enable Consistent Sudoku Symbol Representation with <code>convertToSudokuSymbol</code> (#63) by @teogor</li> <li>Enhance SudokuPuzzle with Grid Generation from Given Cells (#62) by @teogor</li> <li>Enable User-Driven Sudoku Generation with Public SudokuGenerator (#60) by @teogor</li> <li>Improve Variable Naming for Clarity: uniqueDigitsCount &amp; totalCells (#59) by @teogor</li> </ul> <p>Bug Fixes</p> <ul> <li>Ensure Compatibility During Deprecation: Replace Deprecated Functions in createPuzzle() (#61) by @teogor</li> <li>Improve Variable Naming for Clarity: uniqueDigitsCount &amp; totalCells (#59) by @teogor</li> </ul> <p>Documentation</p> <ul> <li>Improve Documentation Clarity and User Guidance (#64) by @teogor</li> </ul>"},{"location":"releases/#version-100-beta01","title":"Version 1.0.0-beta01","text":"<p>February 21, 2024</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-beta01</code> is released. Version 1.0.0-beta01 contains these commits</p> <p>Enhancement</p> <ul> <li>Enhance Sudoku generation with improved combinedSeeds and seed-based tests (#55) by @teogor</li> <li>Enable easier string conversion with default mappers in Sudoku board functions (#53) by @teogor</li> <li>Enable encoding and decoding Sudoku boards to/from strings (#52) by @teogor</li> <li>Introduce <code>SudokuType</code> sealed class (#51) by @teogor</li> <li>Refactor <code>Seed</code> type to <code>sealed class</code> for improved safety and organization (#49) by @teogor</li> <li>Enhance Tokenizer with sealed class structure and improved token handling (#48) by @teogor</li> <li>Enhance <code>SudokuParams.createPuzzle()</code> by introducing <code>SudokuPuzzle</code> data class (#46) by @teogor</li> </ul> <p>Bug Fixes</p> <ul> <li>Improved accuracy and reliability of BoardCell conversions with comprehensive testing (#54) by @teogor</li> </ul> <p>Documentation</p> <ul> <li>Future-Proofing Sudoku: Deprecate Legacy Flow Types, Migrate to <code>SudokuPuzzle</code> (#57) by @teogor</li> <li>Updated Docs (#50) by @teogor</li> <li>Modularize Project Structure: Core, Common, Ktx, Seeds Modules (#47) by @teogor</li> </ul> <p>Others</p> <ul> <li>Upgrade JVM Target Compatibility to Java 17 (Kotlin) (#56) by @teogor</li> <li>Missing project URL in pom causing Sonatype service stop failure (#43) by @teogor</li> <li>Ensure successful <code>publishAllPublicationsToMavenCentral</code> execution (#42) by @teogor</li> </ul>"},{"location":"releases/#version-100-alpha04","title":"Version 1.0.0-alpha04","text":"<p>February 08, 2024</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-alpha04</code> is released. Version 1.0.0-alpha04 contains these commits</p> <p>Enhancement</p> <ul> <li>Introduce more descriptive Cell type and board serialization (#40) by @teogor</li> <li>Add <code>supportsDifficulty</code> function for GameType compatibility (#39) by @teogor</li> <li>Enhance Sudoku seed generation for smaller puzzle sizes (#38) by @teogor</li> <li>Implement Sudoku puzzle parsing and decoding (#37) by @teogor</li> <li>Enhance Sudoku Solver with Thorough Test Suite (#34) by @teogor</li> <li>Enable Sudoku puzzle parsing and conversion with SudokuParser (#33) by @teogor</li> <li>Enhance Sudoku Seeds with Additional Game Types and Difficulties (#32) by @teogor</li> <li>Enhance Difficulty Representation with Stars and Text Options (#31) by @teogor</li> <li>Refactor GameType enum for improved readability and clarity (#30) by @teogor</li> <li>Improve Difficulty Enum with Percentages and Documentation (#29) by @teogor</li> </ul> <p>Bug Fixes</p> <ul> <li>Enhance Sudoku seed generation for smaller puzzle sizes (#38) by @teogor</li> </ul> <p>Maintenance</p> <ul> <li>Enhance Sudoku Solver with Thorough Test Suite (#34) by @teogor</li> </ul> <p>Documentation</p> <ul> <li>Introduce MkDocs for documentation generation (#36) by @teogor</li> <li>Enhance Code Quality and Maintainability with Dokka, Spotless, and API Validator (#35) by @teogor</li> </ul>"},{"location":"releases/#version-100-alpha03","title":"Version 1.0.0-alpha03","text":"<p>September 21, 2023</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-alpha03</code> is released. Version 1.0.0-alpha03 contains these commits</p> <p>Enhancement</p> <ul> <li>Refactor GameType Enum and Add Utility Functions (#26) by @teogor</li> </ul> <p>Bug Fixes</p> <ul> <li>Refactor GameType Enum and Add Utility Functions (#26) by @teogor</li> <li>Fix Inconsistency in Sudoku Puzzle Patterns and Solutions (#24) by @teogor</li> </ul> <p>Maintenance</p> <ul> <li>Update Dependency Versions and Build Configuration (#27) by @teogor</li> <li>Update Maven Publishing Configuration (#25) by @teogor</li> </ul> <p>Documentation</p> <ul> <li>Update Dependency Versions and Build Configuration (#27) by @teogor</li> <li>Refactor GameType Enum and Add Utility Functions (#26) by @teogor</li> <li>Update Maven Publishing Configuration (#25) by @teogor</li> </ul>"},{"location":"releases/#version-100-alpha02","title":"Version 1.0.0-alpha02","text":"<p>August 25, 2023</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-alpha02</code> is released. Version 1.0.0-alpha02 contains these commits</p> <p>Bug Fixes</p> <ul> <li>Corrected Data Types in Accessing Generated Sudoku (#21) by @teogor</li> <li>Update Package Name from <code>exntensions</code> to <code>extensions</code> (#20) by @teogor</li> </ul> <p>Maintenance</p> <ul> <li>Bump Maven Publish Version to 1.0.0-alpha02 (#22) by @teogor</li> <li>Adding Code of Conduct for a Respectful Community (#19) by @teogor</li> <li>Redefining Puzzle Generation: Sudoklify's Innovative Approach (#18) by @teogor</li> </ul> <p>Documentation</p> <ul> <li>Corrected Data Types in Accessing Generated Sudoku (#21) by @teogor</li> <li>Adding Code of Conduct for a Respectful Community (#19) by @teogor</li> <li>Redefining Puzzle Generation: Sudoklify's Innovative Approach (#18) by @teogor</li> </ul>"},{"location":"releases/#version-100-alpha01","title":"Version 1.0.0-alpha01","text":"<p>August 24, 2023</p> <p><code>dev.teogor.sudoklify:sudoklify-*:1.0.0-alpha01</code> is released. Version 1.0.0-alpha01 contains these commits</p>"},{"location":"releases/#introducing-sudoklify-v100-alpha01","title":"\ud83c\udf89 Introducing Sudoklify v1.0.0-alpha01 \ud83e\udde9","text":"<p>Sudoklify, the Sudoku puzzle generation library, is here with its exciting release! Crafted with love in Kotlin, Sudoklify empowers you to effortlessly generate, manipulate, and solve Sudoku puzzles of varying grid sizes and difficulty levels. Dive into the world of puzzles and challenge your logic with Sudoklify. Let the Sudoku adventures begin! \ud83d\ude80\ud83e\udde0</p>"},{"location":"releases/changelog/1.0.0-alpha01/","title":"Version 1.0.0-alpha01","text":""},{"location":"releases/changelog/1.0.0-alpha01/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Sudoklify dev.teogor.sudoklify:sudoklify 1.0.0-alpha01"},{"location":"releases/changelog/1.0.0-alpha02/","title":"Version 1.0.0-alpha02","text":""},{"location":"releases/changelog/1.0.0-alpha02/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Sudoklify dev.teogor.sudoklify:sudoklify 1.0.0-alpha02"},{"location":"releases/changelog/1.0.0-alpha03/","title":"Version 1.0.0-alpha03","text":""},{"location":"releases/changelog/1.0.0-alpha03/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Sudoklify dev.teogor.sudoklify:sudoklify 1.0.0-alpha03"},{"location":"releases/changelog/1.0.0-alpha04/","title":"Version 1.0.0-alpha04","text":""},{"location":"releases/changelog/1.0.0-alpha04/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Sudoklify dev.teogor.sudoklify:sudoklify 1.0.0-alpha04"},{"location":"releases/changelog/1.0.0-beta01/","title":"Version 1.0.0-beta01","text":""},{"location":"releases/changelog/1.0.0-beta01/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83d\udee0\ufe0f Sudoklify Common dev.teogor.sudoklify:sudoklify-common 1.0.0-beta01 \ud83d\udee0\ufe0f Sudoklify Core dev.teogor.sudoklify:sudoklify-core 1.0.0-beta01 \ud83d\udee0\ufe0f Sudoklify KTX dev.teogor.sudoklify:sudoklify-ktx 1.0.0-beta01 \ud83d\udee0\ufe0f Sudoklify Seeds dev.teogor.sudoklify:sudoklify-seeds 1.0.0-beta01"},{"location":"releases/changelog/1.0.0-beta02/","title":"Version 1.0.0-beta02","text":""},{"location":"releases/changelog/1.0.0-beta02/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83d\udee0\ufe0f Sudoklify Common dev.teogor.sudoklify:sudoklify-common 1.0.0-beta02 \ud83d\udee0\ufe0f Sudoklify Core dev.teogor.sudoklify:sudoklify-core 1.0.0-beta02 \ud83d\udee0\ufe0f Sudoklify KTX dev.teogor.sudoklify:sudoklify-ktx 1.0.0-beta02 \ud83d\udee0\ufe0f Sudoklify Seeds dev.teogor.sudoklify:sudoklify-seeds 1.0.0-beta02"},{"location":"releases/changelog/1.0.0-beta03/","title":"Version 1.0.0-beta03","text":""},{"location":"releases/changelog/1.0.0-beta03/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83d\udee0\ufe0f Sudoklify Common dev.teogor.sudoklify:sudoklify-common 1.0.0-beta03 \ud83d\udee0\ufe0f Sudoklify Core dev.teogor.sudoklify:sudoklify-core 1.0.0-beta03 \ud83d\udee0\ufe0f Sudoklify KTX dev.teogor.sudoklify:sudoklify-ktx 1.0.0-beta03 \ud83d\udee0\ufe0f Sudoklify Seeds dev.teogor.sudoklify:sudoklify-seeds 1.0.0-beta03"},{"location":"blog/","title":"Blog","text":""}]}