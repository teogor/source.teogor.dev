{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Drifter Repository","text":"<p>Drifter simplifies the integration between Unity and Android, enhancing performance seamlessly and effortlessly.</p>"},{"location":"#download","title":"Download","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Modules</li> <li>drifter-compose</li> <li>drifter-integration</li> <li>drifter-core</li> <li>drifter-wallpaper</li> <li>drifter-plugin</li> <li>Getting Started</li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"#gradle","title":"Gradle","text":"<p>Add the dependency below to your module's <code>build.*</code> file.</p> <ul> <li>for <code>build.gradle</code></li> </ul> <pre><code>dependencies {\n  implementation platform('dev.teogor.drifter:bom:1.0.0-alpha01')\n}\n</code></pre> <ul> <li>for <code>build.gradle.kts</code></li> </ul> <pre><code>dependencies {\n  implementation(platform(\"dev.teogor.drifter:bom:1.0.0-alpha01\"))\n}\n</code></pre> <p>Note: This library has more modules therefore include only the ones that you want to use.</p>"},{"location":"#simplifying-unity-engine-integration-with-jetpack-compose","title":"Simplifying Unity Engine Integration with Jetpack Compose","text":"<p>Empowering seamless Unity experiences in your Android apps</p> <p>Drifter now offers powerful tools to integrate the Unity Engine directly into your Jetpack Compose UI. Unlock a world of possibilities with the <code>drifter-compose</code> module, designed to simplify and enhance your Compose development journey.</p> <p>Effortlessly Integrate Unity Engine:</p> <ul> <li>Embed Unity content directly within your Jetpack Compose layouts using intuitive APIs.</li> <li>Enjoy smooth and responsive performance thanks to optimized rendering and resource management.</li> <li>Leverage pre-built components like <code>UnityEngineView</code> and <code>UnityEngineScaffold</code> to accelerate your   development.</li> <li>Customize and adapt the integration to your specific needs and preferences.</li> </ul> <p>Explore the Documentation:</p> <p>Discover a comprehensive guide for <code>drifter-compose</code> at link to unity-engine-jetpack-compose. Learn step-by-step instructions, explore code examples, and gain best practices to maximize the potential of Unity Engine in your Compose projects. n in a markdown code snippet format.</p>"},{"location":"#modules","title":"Modules","text":""},{"location":"#drifter-compose","title":"drifter-compose","text":"<p>The <code>drifter-compose</code> module provides functionality for working with Jetpack Compose in Android applications. It includes utilities and components to simplify Compose-based UI development.</p> <p>Explore the source code</p>"},{"location":"#drifter-integration","title":"drifter-integration","text":"<p>The <code>drifter-integration</code> module offers integration points and connectors for third-party libraries and services commonly used in Android development. It allows you to seamlessly integrate your Android app with various services.</p> <p>Explore the source code</p>"},{"location":"#drifter-core","title":"drifter-core","text":"<p>The <code>drifter-core</code> module contains core functionality and utilities that are commonly used across Android projects. It provides a foundation for building robust Android applications.</p> <p>Explore the source code</p>"},{"location":"#drifter-wallpaper","title":"drifter-wallpaper","text":"<p>The <code>drifter-wallpaper</code> module focuses on wallpaper-related features and tools for Android. It simplifies the development of live wallpapers and wallpaper-related functionalities.</p> <p>Explore the source code</p>"},{"location":"#drifter-plugin","title":"drifter-plugin","text":"<p>The <code>drifter-plugin</code> module provides a Gradle plugin that can be used to enhance your Android project build process. It offers features such as code generation, resource management, and more.</p> <p>This Gradle plugin simplifies Unity integration for your project by providing two essential tasks:</p> <ol> <li>BuildIl2CppTask: Compiles and builds Il2Cpp for Unity integration.</li> <li>UnityAssetSyncTask: Synchronizes Unity exported assets for project preparation.</li> </ol> <p>Explore the source code</p>"},{"location":"#find-this-repository-useful-heart","title":"Find this repository useful? :heart:","text":"<p>Show your appreciation by starring this project :star: and joining our community of _ stargazers_.</p> <p>Want to stay updated on my latest projects and contributions? Be sure to _ follow me_ on GitHub! \ud83e\udd29</p>"},{"location":"#license","title":"License","text":"<pre><code>Designed and developed by 2023 teogor (Teodor Grigor)\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");you may not use this file except in compliance with the License.You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.\n</code></pre>"},{"location":"drifter-plugin/","title":"Usage Guide for Drifter-Plugin (Unity Integration Plugin)","text":""},{"location":"drifter-plugin/#overview","title":"Overview","text":"<p>The Unity Integration Plugin simplifies the process of integrating Unity projects into your Gradle-based project. It provides two essential tasks: <code>BuildIl2CppTask</code> and <code>UnityAssetSyncTask</code>. This guide explains how to use these tasks effectively.</p>"},{"location":"drifter-plugin/#prerequisites","title":"Prerequisites","text":"<p>Before using the Unity Integration Plugin, ensure the following:</p> <ul> <li>You have a Gradle-based Android project.</li> <li>Unity projects to be integrated have been properly exported.</li> </ul>"},{"location":"drifter-plugin/#installation","title":"Installation","text":"<p>To get started, add the Unity Integration Plugin to your <code>build.gradle</code> file:</p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'your.plugin.dependency.here'\n    }\n}\n\napply plugin: 'dev.teogor.drifter.plugin'\n</code></pre>"},{"location":"drifter-plugin/#using-buildil2cpptask","title":"Using <code>BuildIl2CppTask</code>","text":""},{"location":"drifter-plugin/#purpose","title":"Purpose","text":"<p>The <code>BuildIl2CppTask</code> automates the compilation and building of Il2Cpp for Unity integration. It enhances the efficiency of your development workflow by handling complex build processes.</p>"},{"location":"drifter-plugin/#configuration","title":"Configuration","text":"<p>To use <code>BuildIl2CppTask</code>, follow these steps:</p> <ol> <li>Configure Unity options in your <code>build.gradle</code> file.</li> </ol> <pre><code>unityOptions {\n    exportFolder = 'path/to/unity/export/folder'\n    libraryName = 'YourUnityLibrary'\n    // Add more configuration options as needed\n}\n</code></pre> <ol> <li>Create the task and set Unity options:</li> </ol> <pre><code>createBuildIl2CppTask(unityOptions)\n</code></pre> <ol> <li>Execute the task:</li> </ol> <pre><code>./gradlew buildIl2Cpp\n</code></pre> <p>Here's a Kotlin code snippet for your <code>build.gradle</code> file that demonstrates the configuration and usage:</p> <pre><code>// Configure Unity options\nunityOptions {\n    exportFolder = 'path/to/unity/export/folder'\n    libraryName = 'YourUnityLibrary'\n    // Add more configuration options as needed\n}\n\n// Create and set up the BuildIl2CppTask\ncreateBuildIl2CppTask(unityOptions)\n\n// Execute the BuildIl2CppTask\nproject.tasks.named(\"buildIl2Cpp\").configure {\n    // Add any additional configuration or dependencies here if needed\n    // For example:\n    // dependsOn(\"someOtherTask\")\n}\n</code></pre>"},{"location":"drifter-plugin/#using-unityassetsynctask","title":"Using <code>UnityAssetSyncTask</code>","text":""},{"location":"drifter-plugin/#purpose_1","title":"Purpose","text":"<p>The <code>UnityAssetSyncTask</code> streamlines the synchronization of Unity exported assets with your project. It prepares the project for Unity integration by copying essential folders.</p>"},{"location":"drifter-plugin/#configuration_1","title":"Configuration","text":"<p>To use <code>UnityAssetSyncTask</code>, follow these steps:</p> <ol> <li> <p>Configure Unity options in your <code>build.gradle</code> file (if not already done).</p> </li> <li> <p>Create the task and set Unity options:</p> </li> </ol> <pre><code>createUnityAssetSyncTask(unityOptions)\n</code></pre> <ol> <li>Execute the task:</li> </ol> <pre><code>./gradlew syncUnityAssets\n</code></pre> <p>Here's a Kotlin code snippet for your <code>build.gradle</code> file that demonstrates the configuration and usage:</p> <pre><code>// Create and set up the UnityAssetSyncTask\ncreateUnityAssetSyncTask(unityOptions)\n\n// Execute the UnityAssetSyncTask\nproject.tasks.named(\"syncUnityAssets\").configure {\n    // Add any additional configuration or dependencies here if needed\n    // For example:\n    // dependsOn(\"anotherTask\")\n}\n</code></pre>"},{"location":"drifter-plugin/#conclusion","title":"Conclusion","text":"<p>With the Unity Integration Plugin, you can seamlessly integrate Unity projects into your Gradle-based project, enhancing the development process and ensuring consistency. If you encounter any issues or have feature requests, please don't hesitate to contribute or reach out for support.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#reference","title":"Reference","text":"<p>Welcome to the comprehensive API documentation for our project, meticulously crafted to empower you to effectively utilize its capabilities. This guide provides detailed information about the project's structure, API, and usage, enabling you to navigate the project with ease and unlock its full potential.</p>"},{"location":"reference/#project-overview","title":"Project Overview","text":"<p>Our project encompasses a suite of modules, each designed to address specific functionalities and enhance the overall developer experience. To delve into the intricacies of each module, refer to the dedicated documentation pages:</p>"},{"location":"reference/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.drifter</code></li> <li><code>dev.teogor.drifter:drifter-bom</code></li> <li><code>dev.teogor.drifter:drifter-codegen</code></li> <li><code>dev.teogor.drifter:drifter-common</code></li> <li><code>dev.teogor.drifter:drifter-compose</code></li> <li><code>dev.teogor.drifter:drifter-integration</code></li> <li><code>dev.teogor.drifter:drifter-ksp</code></li> <li><code>dev.teogor.drifter:drifter-plugin</code></li> <li><code>dev.teogor.drifter:drifter-runtime</code></li> <li><code>dev.teogor.drifter:drifter-wallpaper</code></li> <li><code>dev.teogor.drifter:drifter-unity-common</code></li> <li><code>dev.teogor.drifter:drifter-unity-v2022-3-7f1</code></li> </ul>"},{"location":"reference/#contributions-and-support","title":"Contributions and Support","text":"<p>We welcome your valuable feedback and contributions to the project. Your insights are crucial for shaping the project's future and ensuring it continues to meet the needs of our community. If you encounter any issues or have questions, please feel free to raise them on the GitHub Issues \ud83d\udd17 page. Our team is dedicated to assisting you and continuously improving the project's overall quality.</p>"},{"location":"reference/#embark-on-your-coding-journey","title":"Embark on Your Coding Journey","text":"<p>With this extensive documentation as your guide, you are now well-equipped to embark on your coding journey with our project. We hope you find the documentation informative and helpful as you explore the project's capabilities and bring your ideas to life.</p> <p>Happy coding!</p>"},{"location":"releases/","title":"Drifter","text":""},{"location":"releases/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.drifter</code></li> <li><code>dev.teogor.drifter:drifter-bom</code></li> <li><code>dev.teogor.drifter:drifter-codegen</code></li> <li><code>dev.teogor.drifter:drifter-common</code></li> <li><code>dev.teogor.drifter:drifter-compose</code></li> <li><code>dev.teogor.drifter:drifter-integration</code></li> <li><code>dev.teogor.drifter:drifter-ksp</code></li> <li><code>dev.teogor.drifter:drifter-plugin</code></li> <li><code>dev.teogor.drifter:drifter-runtime</code></li> <li><code>dev.teogor.drifter:drifter-wallpaper</code></li> <li><code>dev.teogor.drifter:drifter-unity-common</code></li> <li><code>dev.teogor.drifter:drifter-unity-v2022-3-7f1</code></li> </ul>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Please refer to this table to see which versions of the project are currently receiving security updates:</p> Version Supported STABLE \u2705 ALPHA \u274c BETA \u274c"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability within this project, please follow these steps:</p> <ol> <li> <p>Do Not Disclose Publicly: Do not publicly disclose the vulnerability until it has been    addressed and a security release is available.</p> </li> <li> <p>Contact Us: Report the vulnerability to us by sending an email    to open-source@teogor.dev. You can encrypt sensitive information    using our PGP key to ensure the confidentiality of    the report.</p> </li> <li> <p>Provide Details: Please provide us with detailed information about the vulnerability,    including steps to reproduce, affected versions, and potential impact.</p> </li> <li> <p>Acknowledgment: We will acknowledge your report within 48 hours to confirm that we have    received it and are investigating.</p> </li> <li> <p>Resolution: Our security team will work to validate and address the vulnerability. We will    keep you informed about our progress and expected timelines for resolution.</p> </li> <li> <p>Disclosure: Once the vulnerability is fixed and a release is available, we will work with you    to determine an appropriate timeline for public disclosure. We appreciate your patience during    this process.</p> </li> </ol> <p>Thank you for helping us improve the security of our project.</p> <p>PGP key</p>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":""},{"location":"sponsor/#about-teodor-grigor","title":"About Teodor Grigor","text":"<p>As an active open-source developer, Teodor Grigor (also known as Teogor) has made significant contributions to the developer community by creating and maintaining an extensive portfolio of open-source projects and libraries, primarily focused on Android and Kotlin development. His work has had a profound impact on the development landscape, with his projects being adopted by millions of projects, software engineers, and end-users worldwide.</p>"},{"location":"sponsor/#impact-of-teodor-grigors-work","title":"Impact of Teodor Grigor's Work","text":"<p>Teodor Grigor's open-source contributions have had a significant impact on the developer community. His projects have been used by millions of developers around the world to build high-quality Android and Kotlin applications.</p>"},{"location":"sponsor/#expressing-gratitude-and-supporting-development","title":"Expressing Gratitude and Supporting Development","text":"<p>Has this library helped you streamline your development process and reduce costs? If so, consider expressing your gratitude and supporting the developer's efforts through the provided sponsorship links below.</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Your support is crucial for the ongoing development and enhancement of this library, ensuring it remains a valuable asset for the community. By contributing, you not only express your appreciation but also actively participate in the growth and success of open-source projects like this one. Join us in making a positive impact on the developer's efforts and the future of this project.</p>"},{"location":"sponsor/#contact-teodor-grigor","title":"Contact Teodor Grigor","text":"<p>If you have suggestions for feature requests or would like to explore sponsorship opportunities, please contact the author using the following details:</p> <ul> <li>open-source@teogor.dev</li> <li>LinkedIn</li> <li>Instagram</li> <li>X (formerly known as Twitter)</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Show your support by being the first sponsor of this library!</p>"},{"location":"sponsor/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Your support is crucial for the ongoing development and enhancement of this library. By becoming a sponsor, you can help us:</p> <ul> <li>Continue developing new features and improvements</li> <li>Maintain and update the library for compatibility with the latest technologies</li> <li>Provide timely support to users</li> </ul> <p>Show your appreciation for this valuable library and become a sponsor. Your support makes a real difference!</p> <p>Thank you for your consideration!</p>"},{"location":"unity-engine-jetpack-compose/","title":"Integrating Unity Engine in your Jetpack Compose UI","text":"<p>This document covers two key composable functions, <code>UnityEngineView</code> and <code>UnityEngineScaffold</code>, that enable you to display the Unity Engine instance within your Jetpack Compose application.</p>"},{"location":"unity-engine-jetpack-compose/#unityengineview-displaying-the-unity-engine","title":"<code>UnityEngineView</code> - Displaying the Unity Engine","text":"<p>This function provides a basic way to integrate the Unity Engine into your UI:</p> <p>Parameters</p> <ul> <li><code>modifier</code>: Modifier to apply to the Unity Engine view for styling and positioning.</li> <li><code>onUnityEngineCreated</code>: An optional callback invoked when the Unity Engine is created and ready.</li> </ul> <p>Example Usage</p> <pre><code>Box(modifier = Modifier.fillMaxSize()) {\n  UnityEngineView(\n    modifier = Modifier.size(300.dp),\n    onUnityEngineCreated = { /* Optional callback */ }\n  )\n}\n</code></pre> <p>This will place a Unity Engine view with a size of 300dp within a <code>Box</code> that fills the entire screen. You can customize the size and position using the <code>modifier</code> parameter.</p>"},{"location":"unity-engine-jetpack-compose/#unityenginescaffold-layout-with-unity-engine-and-content","title":"<code>UnityEngineScaffold</code> - Layout with Unity Engine and Content","text":"<p>This function offers a more structured approach for integrating the Unity Engine alongside other UI elements:</p> <p>Parameters</p> <ul> <li><code>modifier</code>: Modifier for the overall layout.</li> <li><code>unityEngineModifier</code>: Modifier specific to the Unity Engine view.</li> <li><code>onUnityEngineCreated</code>: Optional callback for Unity Engine creation.</li> <li><code>content</code>: The composable content to display alongside the Unity Engine.</li> </ul> <p>Example Usage</p> <pre><code>Column(modifier = Modifier.fillMaxSize()) {\n  UnityEngineScaffold(\n    unityEngineModifier = Modifier.size(200.dp),\n    content = {\n      Text(\"Additional UI elements here\")\n      Button(onClick = {}) {\n        Text(\"Interact with the Unity Engine\")\n      }\n    }\n  )\n}\n</code></pre> <p>This example creates a column layout with the Unity Engine occupying the top portion (200dp) and additional UI elements (text and button) below.</p>"},{"location":"unity-engine-jetpack-compose/#key-points","title":"Key Points","text":"<ul> <li>Both functions handle the lifecycle management of the Unity Engine instance.</li> <li>Use <code>onUnityEngineCreated</code> to perform actions when the Unity Engine is ready, such as loading   specific content or sending messages.</li> <li>Consider using <code>UnityEngineScaffold</code> when you need to integrate the Unity Engine with other UI   elements in a structured layout.</li> <li>Remember to import the necessary dependencies and configure your Unity project for proper   integration with Jetpack Compose.</li> </ul> <p>This documentation provides a basic overview of these functions. For further details, refer to the source code and explore the available documentation within your project.</p>"},{"location":"releases/implementation/","title":"Implementation","text":""},{"location":"releases/implementation/#implementation","title":"Implementation","text":""},{"location":"releases/implementation/#latest-version","title":"Latest Version","text":"<p>The latest release is <code>1.0.0-alpha01</code></p>"},{"location":"releases/implementation/#bom-releases","title":"BoM Releases","text":"<p>The BoM (Bill of Materials) is the central repository for managing library versions within the Drifter project. It streamlines the process of tracking the latest versions of key components and dependencies, ensuring that your project remains up-to-date and compatible with the latest advancements.</p> <p>Here's a summary of the latest BoM versions:</p> Version Release Notes Release Date 1.0.0-alpha01 changelog \ud83d\udd17 26 Sept 2023"},{"location":"releases/implementation/#using-version-catalog","title":"Using Version Catalog","text":""},{"location":"releases/implementation/#declare-components","title":"Declare Components","text":"<p>This catalog provides the implementation details of Drifter libraries, including Build of Materials (BoM) and individual libraries, in TOML format.</p> DefaultUsing BoM gradle/libs.versions.toml<pre><code>[versions]\ndrifter = \"1.0.0-alpha01\"\n = \"1.0.0-alpha01\"\ndrifter-unity = \"1.0.0-alpha01\"\n\n[libraries]\ndrifter-codegen = { group = \"dev.teogor.drifter\", name = \"drifter-codegen\", version.ref = \"drifter\" }\ndrifter-common = { group = \"dev.teogor.drifter\", name = \"drifter-common\", version.ref = \"drifter\" }\ndrifter-compose = { group = \"dev.teogor.drifter\", name = \"drifter-compose\", version.ref = \"drifter\" }\ndrifter-integration = { group = \"dev.teogor.drifter\", name = \"drifter-integration\", version.ref = \"drifter\" }\ndrifter = { group = \"dev.teogor.drifter\", name = \"drifter\", version.ref = \"\" }\ndrifter-wallpaper = { group = \"dev.teogor.drifter\", name = \"drifter-wallpaper\", version.ref = \"drifter\" }\ndrifter-ksp = { group = \"dev.teogor.drifter\", name = \"drifter-ksp\", version.ref = \"drifter\" }\ndrifter-runtime = { group = \"dev.teogor.drifter\", name = \"drifter-runtime\", version.ref = \"drifter\" }\ndrifter-unity-common = { group = \"dev.teogor.drifter\", name = \"drifter-unity-common\", version.ref = \"drifter-unity\" }\ndrifter-unity-2022.3.7f1 = { group = \"dev.teogor.drifter\", name = \"drifter-unity-2022-3-7f1\", version.ref = \"drifter-unity\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndrifter-bom = \"1.0.0-alpha01\"\n\n[libraries]\ndrifter-bom = { group = \"dev.teogor.drifter\", name = \"drifter-bom\", version.ref = \"drifter-bom\" }\ndrifter-codegen = { group = \"dev.teogor.drifter\", name = \"drifter-codegen\" }\ndrifter-common = { group = \"dev.teogor.drifter\", name = \"drifter-common\" }\ndrifter-compose = { group = \"dev.teogor.drifter\", name = \"drifter-compose\" }\ndrifter-integration = { group = \"dev.teogor.drifter\", name = \"drifter-integration\" }\ndrifter = { group = \"dev.teogor.drifter\", name = \"drifter\" }\ndrifter-wallpaper = { group = \"dev.teogor.drifter\", name = \"drifter-wallpaper\" }\ndrifter-ksp = { group = \"dev.teogor.drifter\", name = \"drifter-ksp\" }\ndrifter-runtime = { group = \"dev.teogor.drifter\", name = \"drifter-runtime\" }\ndrifter-unity-common = { group = \"dev.teogor.drifter\", name = \"drifter-unity-Common\" }\ndrifter-unity-2022.3.7f1 = { group = \"dev.teogor.drifter\", name = \"drifter-unity-2022-3-7f1\" }\n</code></pre>"},{"location":"releases/implementation/#dependencies-implementation","title":"Dependencies Implementation","text":"KotlinGroovy build.gradle.kts<pre><code>dependencies {\n  // When Using Drifter BoM\n  implementation(platform(libs.drifter.bom))\n\n  // Drifter Libraries\n  implementation(libs.drifter.codegen)\n  implementation(libs.drifter.common)\n  implementation(libs.drifter.compose)\n  implementation(libs.drifter.integration)\n  implementation(libs.drifter)\n  implementation(libs.drifter.wallpaper)\n  implementation(libs.drifter.ksp)\n  implementation(libs.drifter.runtime)\n  implementation(libs.drifter.unity.common)\n  implementation(libs.drifter.unity.2022.3.7f1)\n}\n</code></pre> build.gradle<pre><code>dependencies {\n  // When Using Drifter BoM\n  implementation platform(libs.drifter.bom)\n\n  // Drifter Libraries\n  implementation libs.drifter.codegen\n  implementation libs.drifter.common\n  implementation libs.drifter.compose\n  implementation libs.drifter.integration\n  implementation libs.drifter\n  implementation libs.drifter.wallpaper\n  implementation libs.drifter.ksp\n  implementation libs.drifter.runtime\n  implementation libs.drifter.unity.common\n  implementation libs.drifter.unity.2022.3.7f1\n}\n</code></pre>"},{"location":"releases/changelog/1.0.0-alpha01/","title":"Version 1.0.0-alpha01","text":""},{"location":"releases/changelog/1.0.0-alpha01/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Drifter Codegen dev.teogor.drifter:drifter-codegen 1.0.0-alpha01 \ud83e\uddea Drifter Common dev.teogor.drifter:drifter-common 1.0.0-alpha01 \ud83e\uddea Drifter Compose dev.teogor.drifter:drifter-compose 1.0.0-alpha01 \ud83e\uddea Drifter Integration dev.teogor.drifter:drifter-integration 1.0.0-alpha01 \ud83e\uddea Drifter dev.teogor.drifter:drifter 1.0.0-alpha01 \ud83e\uddea Drifter Wallpaper dev.teogor.drifter:drifter-wallpaper 1.0.0-alpha01 \ud83e\uddea Drifter KSP dev.teogor.drifter:drifter-ksp 1.0.0-alpha01 \ud83e\uddea Drifter Runtime dev.teogor.drifter:drifter-runtime 1.0.0-alpha01"},{"location":"releases/changelog/1.0.0-alpha02/","title":"Version 1.0.0-alpha02","text":""},{"location":"releases/changelog/1.0.0-alpha02/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Drifter Codegen dev.teogor.drifter:drifter-codegen 1.0.0-alpha02 \ud83e\uddea Drifter Common dev.teogor.drifter:drifter-common 1.0.0-alpha02 \ud83e\uddea Drifter Compose dev.teogor.drifter:drifter-compose 1.0.0-alpha02 \ud83e\uddea Drifter Integration dev.teogor.drifter:drifter-integration 1.0.0-alpha02 \ud83e\uddea Drifter Gradle Plugin dev.teogor.drifter:drifter 1.0.0-alpha02 \ud83e\uddea Drifter Wallpaper dev.teogor.drifter:drifter-wallpaper 1.0.0-alpha02 \ud83e\uddea Drifter KSP dev.teogor.drifter:drifter-ksp 1.0.0-alpha02 \ud83e\uddea Drifter Runtime dev.teogor.drifter:drifter-runtime 1.0.0-alpha02 \ud83e\uddea Drifter Unity Common dev.teogor.drifter:drifter-unity-common 1.0.0-alpha01 \ud83e\uddea Drifter Unity 2022.3.7f1 dev.teogor.drifter:drifter-unity-2022-3-7f1 1.0.0-alpha01"},{"location":"blog/","title":"Blog","text":""}]}