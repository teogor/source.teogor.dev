{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Drifter","text":"<p>Learn more: User Guide and Code Samples</p> <p>\ud83c\udfae Drifter simplifies the integration between Unity and Android, enhancing performance seamlessly and effortlessly.</p>"},{"location":"#download","title":"Download","text":"<p>API Reference <code>dev.teogor.drifter:*</code></p> <p>Drifter is formed by combining 1 Maven Group Ids within dev.teogor.drifter. Each Group encompasses a targeted subset of functionality, with individual sets of release notes.</p> <p>This table provides an overview of the groups and their corresponding links to individual sets of release notes.</p> Group Description drifter.unity not provided"},{"location":"#version","title":"Version","text":"<p>Refer to the table below for an overview of the current versions associated with each group.</p> Maven Group ID Latest Update Stable Release Release Candidate Beta Release Alpha Release drifter.unity September 26, 2023 - - - 1.0.0-alpha01"},{"location":"#feedback","title":"Feedback","text":"<p>Your feedback helps make Drifter better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues on GitHub for this library before you create a new one.</p> <p>Create a new issue</p>"},{"location":"#boms","title":"BOMs","text":"<p>To stay updated with the latest BOM releases, explore the Drifter BOM Mapping Page.</p>"},{"location":"#simplifying-unity-engine-integration-with-jetpack-compose","title":"Simplifying Unity Engine Integration with Jetpack Compose","text":"<p>Empowering seamless Unity experiences in your Android apps</p> <p>Drifter now offers powerful tools to integrate the Unity Engine directly into your Jetpack Compose UI. Unlock a world of possibilities with the <code>drifter-compose</code> module, designed to simplify and enhance your Compose development journey.</p> <p>Effortlessly Integrate Unity Engine:</p> <ul> <li>Embed Unity content directly within your Jetpack Compose layouts using intuitive APIs.</li> <li>Enjoy smooth and responsive performance thanks to optimized rendering and resource management.</li> <li>Leverage pre-built components like <code>UnityEngineView</code> and <code>UnityEngineScaffold</code> to accelerate your   development.</li> <li>Customize and adapt the integration to your specific needs and preferences.</li> </ul> <p>Explore the Documentation:</p> <p>Discover a comprehensive guide for <code>drifter-compose</code> at link to unity-engine-jetpack-compose. Learn step-by-step instructions, explore code examples, and gain best practices to maximize the potential of Unity Engine in your Compose projects. n in a markdown code snippet format.</p>"},{"location":"#find-this-repository-useful-heart","title":"Find this repository useful? :heart:","text":"<p>Show your appreciation by starring this project :star: and joining our community of _ stargazers_.</p> <p>Want to stay updated on my latest projects and contributions? Be sure to _ follow me_ on GitHub! \ud83e\udd29</p>"},{"location":"#license","title":"License","text":"<pre><code>Designed and developed by 2023 teogor (Teodor Grigor)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"plugin-usage-guide/","title":"Usage Guide for Plugin (Unity Integration Plugin)","text":""},{"location":"plugin-usage-guide/#overview","title":"Overview","text":"<p>The Unity Integration Plugin simplifies the process of integrating Unity projects into your Gradle-based project. It provides two essential tasks: <code>UnityNativeBuildTask</code> and <code>RefreshUnityAssetsTask</code>. This guide explains how to use these tasks effectively.</p>"},{"location":"plugin-usage-guide/#prerequisites","title":"Prerequisites","text":"<p>Before using the Unity Integration Plugin, ensure the following:</p> <ul> <li>You have a Gradle-based Android project.</li> <li>Unity projects to be integrated have been properly exported.</li> </ul>"},{"location":"plugin-usage-guide/#installation","title":"Installation","text":"<p>To get started, add the Unity Integration Plugin to your <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>apply plugin: 'dev.teogor.drifter.plugin'\n</code></pre> build.gradle.kts<pre><code>plugins {\n    id(\"dev.teogor.drifter.plugin\")\n}\n</code></pre>"},{"location":"plugin-usage-guide/#using-unitynativebuildtask","title":"Using <code>UnityNativeBuildTask</code>","text":""},{"location":"plugin-usage-guide/#purpose","title":"Purpose","text":"<p>The <code>UnityNativeBuildTask</code> compiles and builds native code for Unity integration, managing architecture-specific binaries and output directories. It enhances the efficiency of your development workflow by automating the complex build processes required for Unity native code.</p>"},{"location":"plugin-usage-guide/#configuration","title":"Configuration","text":"<p>To use <code>UnityNativeBuildTask</code>, follow these steps:</p> <ol> <li>Configure Unity options in your <code>build.gradle</code> file:</li> </ol> GroovyKotlin build.gradle<pre><code>android {\n    namespace = \"dev.teogor.drifter.demo.module.unity\"\n\n    unityOptions {\n        splashMode = 0\n        splashEnable = true\n        buildId = \"ea574d1a-3365-44b3-9676-33bceabcf351\"\n        notchConfig = \"portrait|landscape\"\n        version = \"2022.3.7f1\"\n\n        ndkVersion = \"23.1.7779620\"\n        ndkPath = getSafeDrifterUnityPathNdk()\n\n        platforms = [\n           PlatformArch.Arm64,\n           PlatformArch.Armv7\n        ]\n        configuration = Configuration.Release\n        streamingAssets.addAll(unityStreamingAssetsList)\n\n        exportedProjectLocation = getSafeDrifterUnityPathExport()\n        libraryName = 'YourUnityLibrary'\n    }\n}\n</code></pre> build.gradle.kts<pre><code>val unityStreamingAssets: String? by project\nval unityStreamingAssetsList: List&lt;String&gt; = unityStreamingAssets?.split(\",\") ?: emptyList()\n\nandroid {\n    namespace = \"dev.teogor.drifter.demo.module.unity\"\n\n    unityOptions(\n        androidConfig = this,\n    ) {\n        splashMode = 0\n        splashEnable = true\n        buildId = \"ea574d1a-3365-44b3-9676-33bceabcf351\"\n        notchConfig = \"portrait|landscape\"\n        version = \"2022.3.7f1\"\n\n        ndkVersion = \"23.1.7779620\"\n        ndkPath = getSafeDrifterUnityPathNdk()\n\n        platforms = listOf(\n          PlatformArch.Arm64,\n          PlatformArch.Armv7\n        )\n        configuration = Configuration.Release\n        streamingAssets += unityStreamingAssetsList\n\n        exportedProjectLocation = getSafeDrifterUnityPathExport()\n        libraryName = \"YourUnityLibrary\"\n    }\n}\n</code></pre> <ol> <li>Create the task and set Unity options:</li> </ol> GroovyKotlin build.gradle<pre><code>createUnityNativeBuildTask(unityOptions)\n</code></pre> build.gradle.kts<pre><code>createUnityNativeBuildTask(unityOptions)\n</code></pre> <ol> <li>Execute the task:</li> </ol> <pre><code>./gradlew unityNativeBuild\n</code></pre> <p>Here's a Kotlin code snippet for your <code>build.gradle</code> file that demonstrates the configuration and usage:</p> Kotlin build.gradle.kts<pre><code>// Configure Unity options\nval unityOptions = mapOf(\n    \"exportFolder\" to \"path/to/unity/export/folder\",\n    \"libraryName\" to \"YourUnityLibrary\"\n    // Add more configuration options as needed\n)\n\n// Create and set up the UnityNativeBuildTask\ncreateUnityNativeBuildTask(unityOptions)\n\n// Execute the UnityNativeBuildTask\ntasks.named(\"unityNativeBuild\").configure {\n    // Add any additional configuration or dependencies here if needed\n    // For example:\n    // dependsOn(\"someOtherTask\")\n}\n</code></pre>"},{"location":"plugin-usage-guide/#using-refreshunityassetstask","title":"Using <code>RefreshUnityAssetsTask</code>","text":""},{"location":"plugin-usage-guide/#purpose_1","title":"Purpose","text":"<p>The <code>RefreshUnityAssetsTask</code> streamlines the synchronization and updating of Unity exported assets with your project. It prepares the project for Unity integration by updating essential folders and removing outdated content.</p>"},{"location":"plugin-usage-guide/#configuration_1","title":"Configuration","text":"<p>To use <code>RefreshUnityAssetsTask</code>, follow these steps:</p> <ol> <li> <p>Configure Unity options in your <code>build.gradle</code> file (if not already done).</p> </li> <li> <p>Create the task and set Unity options:</p> </li> </ol> GroovyKotlin build.gradle<pre><code>createRefreshUnityAssetsTask(unityOptions)\n</code></pre> build.gradle.kts<pre><code>createRefreshUnityAssetsTask(unityOptions)\n</code></pre> <ol> <li>Execute the task:</li> </ol> <pre><code>./gradlew refreshUnityAssets\n</code></pre> <p>Here's a Kotlin code snippet for your <code>build.gradle</code> file that demonstrates the configuration and usage:</p> Kotlin build.gradle.kts<pre><code>// Create and set up the RefreshUnityAssetsTask\ncreateRefreshUnityAssetsTask(unityOptions)\n\n// Execute the RefreshUnityAssetsTask\ntasks.named(\"refreshUnityAssets\").configure {\n    // Add any additional configuration or dependencies here if needed\n    // For example:\n    // dependsOn(\"anotherTask\")\n}\n</code></pre>"},{"location":"plugin-usage-guide/#conclusion","title":"Conclusion","text":"<p>With the Unity Integration Plugin, you can seamlessly integrate Unity projects into your Gradle-based project, enhancing the development process and ensuring consistency. If you encounter any issues or have feature requests, please don't hesitate to contribute or reach out for support.</p>"},{"location":"plugin-usage-guide/#quick-references","title":"Quick References","text":"<ol> <li>Installation</li> <li>Using <code>UnityNativeBuildTask</code></li> <li>Using <code>RefreshUnityAssetsTask</code></li> <li>Conclusion</li> </ol>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#reference","title":"Reference","text":"<p>Welcome to the comprehensive API documentation for our project, meticulously crafted to empower you to effectively utilize its capabilities. This guide provides detailed information about the project's structure, API, and usage, enabling you to navigate the project with ease and unlock its full potential.</p>"},{"location":"reference/#project-overview","title":"Project Overview","text":"<p>Our project encompasses a suite of modules, each designed to address specific functionalities and enhance the overall developer experience. To delve into the intricacies of each module, refer to the dedicated documentation pages:</p>"},{"location":"reference/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.drifter</code></li> <li><code>dev.teogor.drifter:drifter-bom</code></li> <li><code>dev.teogor.drifter:drifter-codegen</code></li> <li><code>dev.teogor.drifter:drifter-common</code></li> <li><code>dev.teogor.drifter:drifter-compose</code></li> <li><code>dev.teogor.drifter:drifter-integration</code></li> <li><code>dev.teogor.drifter:drifter-ksp</code></li> <li><code>dev.teogor.drifter:drifter-plugin</code></li> <li><code>dev.teogor.drifter:drifter-runtime</code></li> <li><code>dev.teogor.drifter:drifter-wallpaper</code></li> <li><code>dev.teogor.drifter:drifter-unity-common</code></li> <li><code>dev.teogor.drifter:drifter-unity-v2022-3-7f1</code></li> </ul>"},{"location":"reference/#contributions-and-support","title":"Contributions and Support","text":"<p>We welcome your valuable feedback and contributions to the project. Your insights are crucial for shaping the project's future and ensuring it continues to meet the needs of our community. If you encounter any issues or have questions, please feel free to raise them on the GitHub Issues \ud83d\udd17 page. Our team is dedicated to assisting you and continuously improving the project's overall quality.</p>"},{"location":"reference/#embark-on-your-coding-journey","title":"Embark on Your Coding Journey","text":"<p>With this extensive documentation as your guide, you are now well-equipped to embark on your coding journey with our project. We hope you find the documentation informative and helpful as you explore the project's capabilities and bring your ideas to life.</p> <p>Happy coding!</p>"},{"location":"releases/","title":"Drifter","text":""},{"location":"releases/#api-reference","title":"API Reference","text":"<ul> <li><code>dev.teogor.drifter</code></li> <li><code>dev.teogor.drifter:drifter-bom</code></li> <li><code>dev.teogor.drifter:drifter-codegen</code></li> <li><code>dev.teogor.drifter:drifter-common</code></li> <li><code>dev.teogor.drifter:drifter-compose</code></li> <li><code>dev.teogor.drifter:drifter-integration</code></li> <li><code>dev.teogor.drifter:drifter-ksp</code></li> <li><code>dev.teogor.drifter:drifter-plugin</code></li> <li><code>dev.teogor.drifter:drifter-runtime</code></li> <li><code>dev.teogor.drifter:drifter-wallpaper</code></li> <li><code>dev.teogor.drifter:drifter-unity-common</code></li> <li><code>dev.teogor.drifter:drifter-unity-v2022-3-7f1</code></li> </ul>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Please refer to this table to see which versions of the project are currently receiving security updates:</p> Version Supported STABLE \u2705 ALPHA \u274c BETA \u274c"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability within this project, please follow these steps:</p> <ol> <li> <p>Do Not Disclose Publicly: Do not publicly disclose the vulnerability until it has been    addressed and a security release is available.</p> </li> <li> <p>Contact Us: Report the vulnerability to us by sending an email    to open-source@teogor.dev. You can encrypt sensitive information    using our PGP key to ensure the confidentiality of    the report.</p> </li> <li> <p>Provide Details: Please provide us with detailed information about the vulnerability,    including steps to reproduce, affected versions, and potential impact.</p> </li> <li> <p>Acknowledgment: We will acknowledge your report within 48 hours to confirm that we have    received it and are investigating.</p> </li> <li> <p>Resolution: Our security team will work to validate and address the vulnerability. We will    keep you informed about our progress and expected timelines for resolution.</p> </li> <li> <p>Disclosure: Once the vulnerability is fixed and a release is available, we will work with you    to determine an appropriate timeline for public disclosure. We appreciate your patience during    this process.</p> </li> </ol> <p>Thank you for helping us improve the security of our project.</p> <p>PGP key</p>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":""},{"location":"sponsor/#about-teodor-grigor","title":"About Teodor Grigor","text":"<p>As an active open-source developer, Teodor Grigor (also known as Teogor) has made significant contributions to the developer community by creating and maintaining an extensive portfolio of open-source projects and libraries, primarily focused on Android and Kotlin development. His work has had a profound impact on the development landscape, with his projects being adopted by millions of projects, software engineers, and end-users worldwide.</p>"},{"location":"sponsor/#impact-of-teodor-grigors-work","title":"Impact of Teodor Grigor's Work","text":"<p>Teodor Grigor's open-source contributions have had a significant impact on the developer community. His projects have been used by millions of developers around the world to build high-quality Android and Kotlin applications.</p>"},{"location":"sponsor/#expressing-gratitude-and-supporting-development","title":"Expressing Gratitude and Supporting Development","text":"<p>Has this library helped you streamline your development process and reduce costs? If so, consider expressing your gratitude and supporting the developer's efforts through the provided sponsorship links below.</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Your support is crucial for the ongoing development and enhancement of this library, ensuring it remains a valuable asset for the community. By contributing, you not only express your appreciation but also actively participate in the growth and success of open-source projects like this one. Join us in making a positive impact on the developer's efforts and the future of this project.</p>"},{"location":"sponsor/#contact-teodor-grigor","title":"Contact Teodor Grigor","text":"<p>If you have suggestions for feature requests or would like to explore sponsorship opportunities, please contact the author using the following details:</p> <ul> <li>open-source@teogor.dev</li> <li>LinkedIn</li> <li>Instagram</li> <li>X (formerly known as Twitter)</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Show your support by being the first sponsor of this library!</p>"},{"location":"sponsor/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Your support is crucial for the ongoing development and enhancement of this library. By becoming a sponsor, you can help us:</p> <ul> <li>Continue developing new features and improvements</li> <li>Maintain and update the library for compatibility with the latest technologies</li> <li>Provide timely support to users</li> </ul> <p>Show your appreciation for this valuable library and become a sponsor. Your support makes a real difference!</p> <p>Thank you for your consideration!</p>"},{"location":"unity-compatibility/","title":"Unity Module Compatibility","text":"<p>Drifter is a comprehensive library designed to enhance and streamline your Unity development workflow. This document outlines the specific Unity versions that the Drifter library supports.</p>"},{"location":"unity-compatibility/#supported-unity-versions","title":"Supported Unity Versions","text":"Version Release Date Release Notes Hub Installation Downloads 2022.3.42f1 13 Aug 2024 Read Install See all 2022.3.7f1 8 Aug 2023 Read Install See all"},{"location":"unity-compatibility/#how-to-use","title":"How to Use","text":"<p>To ensure compatibility and take full advantage of the features provided by Drifter, make sure you are using one of the supported Unity versions listed above.</p>"},{"location":"unity-compatibility/#installation-steps","title":"Installation Steps","text":"<ol> <li>Import the Drifter library into your project.</li> <li>Import the relevant Unity module from Drifter that suits your project requirements.    Here\u2019s the refined section with the installation steps incorporating the code snippets:</li> </ol>"},{"location":"unity-compatibility/#installation-steps_1","title":"Installation Steps","text":"<ol> <li>Import the Drifter library into your project.</li> </ol> <p>For more details, view the implementation guide.</p> <ol> <li>Import the relevant Unity module from Drifter that suits your project requirements.</li> </ol> <p>For example, to implement the Drifter Unity module for <code>v2022.3.7f1</code>, add the following    dependency:</p> <pre><code>dependencies {\n   implementation(\"dev.teogor.drifter:drifter-unity-2022-3-7f1:$version\")\n}\n</code></pre> <ol> <li>Set up your <code>Application</code> class to initialize Drifter with the appropriate Unity version.</li> </ol> <p>Update your <code>Application</code> class as follows:</p> <pre><code>class DemoApplication : Application() {\n\n  override fun onCreate() {\n    super.onCreate()\n\n    // Initialize Drifter with the Unity factory for version 2022.3.7f1\n    RegistryStartup.provides(withUnity202237f1Factory())\n  }\n}\n</code></pre> <p>Alternatively, you can use <code>LocalUnityEngine</code> to provide the Unity factory:</p> <pre><code>LocalUnityEngine provide Unity202237f1Factory()\n</code></pre>"},{"location":"unity-compatibility/#need-help","title":"Need Help?","text":"<p>If you encounter any issues or have questions regarding compatibility, feel free to open an issue on the GitHub Issues page.</p>"},{"location":"unity-compatibility/#quick-references","title":"Quick References","text":"<ol> <li>Supported Unity Versions</li> <li>How to Use</li> <li>Installation Steps</li> <li>Need Help?</li> </ol>"},{"location":"unity-engine-jetpack-compose/","title":"Integrating Unity Engine in your Jetpack Compose UI","text":"<p>This document covers two key composable functions, <code>UnityEngineView</code> and <code>UnityEngineScaffold</code>, that enable you to display the Unity Engine instance within your Jetpack Compose application.</p>"},{"location":"unity-engine-jetpack-compose/#unityengineview-displaying-the-unity-engine","title":"<code>UnityEngineView</code> - Displaying the Unity Engine","text":"<p>This function provides a basic way to integrate the Unity Engine into your UI:</p> <p>Parameters</p> <ul> <li><code>modifier</code>: Modifier to apply to the Unity Engine view for styling and positioning.</li> <li><code>onUnityEngineCreated</code>: An optional callback invoked when the Unity Engine is created and ready.</li> </ul> <p>Example Usage</p> <pre><code>Box(modifier = Modifier.fillMaxSize()) {\n  UnityEngineView(\n    modifier = Modifier.size(300.dp),\n    onUnityEngineCreated = { /* Optional callback */ }\n  )\n}\n</code></pre> <p>This will place a Unity Engine view with a size of 300dp within a <code>Box</code> that fills the entire screen. You can customize the size and position using the <code>modifier</code> parameter.</p>"},{"location":"unity-engine-jetpack-compose/#unityenginescaffold-layout-with-unity-engine-and-content","title":"<code>UnityEngineScaffold</code> - Layout with Unity Engine and Content","text":"<p>This function offers a more structured approach for integrating the Unity Engine alongside other UI elements:</p> <p>Parameters</p> <ul> <li><code>modifier</code>: Modifier for the overall layout.</li> <li><code>unityEngineModifier</code>: Modifier specific to the Unity Engine view.</li> <li><code>onUnityEngineCreated</code>: Optional callback for Unity Engine creation.</li> <li><code>content</code>: The composable content to display alongside the Unity Engine.</li> </ul> <p>Example Usage</p> <pre><code>Column(modifier = Modifier.fillMaxSize()) {\n  UnityEngineScaffold(\n    unityEngineModifier = Modifier.size(200.dp),\n    content = {\n      Text(\"Additional UI elements here\")\n      Button(onClick = {}) {\n        Text(\"Interact with the Unity Engine\")\n      }\n    }\n  )\n}\n</code></pre> <p>This example creates a column layout with the Unity Engine occupying the top portion (200dp) and additional UI elements (text and button) below.</p>"},{"location":"unity-engine-jetpack-compose/#key-points","title":"Key Points","text":"<ul> <li>Both functions handle the lifecycle management of the Unity Engine instance.</li> <li>Use <code>onUnityEngineCreated</code> to perform actions when the Unity Engine is ready, such as loading   specific content or sending messages.</li> <li>Consider using <code>UnityEngineScaffold</code> when you need to integrate the Unity Engine with other UI   elements in a structured layout.</li> <li>Remember to import the necessary dependencies and configure your Unity project for proper   integration with Jetpack Compose.</li> </ul> <p>This documentation provides a basic overview of these functions. For further details, refer to the source code and explore the available documentation within your project.</p>"},{"location":"bom/","title":"Using the Bill of Materials","text":"<p>The BoM Bill of Materials (BOM) lets you manage all of your BoM library versions by specifying only the BOM\u2019s version. The BOM itself has links to the stable versions of the different BoM libraries, in such a way that they work well together. When using the BOM in your app, you don't need to add any version to the BoM library dependencies themselves. When you update the BOM version, all the libraries that you're using are automatically updated to their new versions.</p> <p>To find out which BoM library versions are mapped to a specific BOM version, check out the BOM to library version mapping.</p>"},{"location":"bom/#how-do-i-use-a-different-library-version-than-whats-designated-in-the-bom","title":"How do I use a different library version than what's designated in the BOM?","text":"<p>In the <code>build.gradle</code> dependencies section, keep the import of the BOM platform. On the library dependency import, specify the desired version. For example, here's how to declare dependencies if you want to use a different version of Core, no matter what version is designated in the BOM:</p> <pre><code>dependencies {\n  // Import the BoM BOM\n  implementation platform('dev.teogor.drifter:drifter-bom:1.0.0-alpha02')\n\n  // Import Core library\n  implementation 'dev.teogor.drifter:drifter-core:1.0.0-alpha02'\n\n  // Import other BoM libraries without version numbers\n  // ..\n  implementation 'dev.teogor.drifter:drifter-core'\n}\n</code></pre>"},{"location":"bom/#does-the-bom-automatically-add-all-the-bom-libraries-to-my-app","title":"Does the BOM automatically add all the BoM libraries to my app?","text":"<p>No. To actually add and use BoM libraries in your app, you must declare each library as a separate dependency line in your module (app-level) Gradle file (usually <code>app/build.gradle</code>).</p> <p>Using the BOM ensures that the versions of any BoM libraries in your app are compatible, but the BOM doesn't actually add those BoM libraries to your app.</p>"},{"location":"bom/#why-is-the-bom-the-recommended-way-to-manage-bom-library-versions","title":"Why is the BOM the recommended way to manage BoM library versions?","text":"<p>Going forward, BoM libraries will be versioned independently, which means version numbers will start to be incremented at their own pace. The latest stable releases of each library are tested and guaranteed to work nicely together. However, finding the latest stable versions of each library can be difficult, and the BOM helps you to automatically use these latest versions.</p>"},{"location":"bom/#am-i-forced-to-use-the-bom","title":"Am I forced to use the BOM?","text":"<p>No. You can still choose to add each dependency version manually. However, we recommend using the BOM as it will make it easier to use all of the latest stable versions at the same time.</p>"},{"location":"bom/#does-the-bom-work-with-version-catalogs","title":"Does the BOM work with version catalogs?","text":"<p>Yes. You can include the BOM itself in the version catalog, and omit the other BoM library versions:</p> <pre><code>[libraries]\nteogor-drifter-bom = { group = \"dev.teogor.drifter\", name = \"drifter-bom\", version.ref = \"teogor-drifter-bom\" }\nteogor-drifter-core = { group = \"dev.teogor.drifter\", name = \"drifter-core\" }\n</code></pre> <p>Don\u2019t forget to import the BOM in your module\u2019s <code>build.gradle</code>:</p> <pre><code>dependencies {\n    val teogorDrifterBom = platform(libs.teogor.drifter.bom)\n    implementation(teogorDrifterBom)\n    androidTestImplementation(teogorDrifterBom)\n\n    // import BoM dependencies as usual\n}\n</code></pre>"},{"location":"bom/#how-do-i-report-an-issue-or-offer-feedback-on-the-bom","title":"How do I report an issue or offer feedback on the BOM?","text":"<p>You can file issues on our issue tracker \ud83d\udd17.</p>"},{"location":"bom/bom-mapping/","title":"BOM to library version mapping","text":"<p>BOM version 1.0.0-alpha02</p> Library group BOM Versions dev.teogor.drifter:drifter-codegen 1.0.0-alpha02 dev.teogor.drifter:drifter-compose 1.0.0-alpha02 dev.teogor.drifter:drifter-core 1.0.0-alpha02 dev.teogor.drifter:drifter-integration 1.0.0-alpha02 dev.teogor.drifter:drifter-ksp 1.0.0-alpha02 dev.teogor.drifter:drifter-runtime 1.0.0-alpha02 dev.teogor.drifter:drifter-unity-2022-3-7f1 1.0.0-alpha01 dev.teogor.drifter:drifter-unity-common 1.0.0-alpha01 dev.teogor.drifter:drifter-wallpaper 1.0.0-alpha02"},{"location":"bom/implementation/","title":"BoM","text":""},{"location":"bom/implementation/#getting-started-with-bom","title":"Getting Started with BoM","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding BoM dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.  </p>"},{"location":"bom/implementation/#adding-bom-dependencies-manually","title":"Adding BoM Dependencies Manually","text":"<p>To use BoM in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorDrifterBom = \"1.0.0-alpha02\"\n\n    implementation \"dev.teogor.drifter:drifter-bom:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-codegen:$teogorDrifterBom\"\n\n    // To use Kotlin annotation processing tool (kapt)\n    kapt \"dev.teogor.drifter:drifter-ksp:$teogorDrifterBom\"\n    // To use Kotlin Symbol Processing (KSP)\n    ksp \"dev.teogor.drifter:drifter-ksp:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-compose:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-core:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-integration:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-runtime:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-wallpaper:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-unity-common:$teogorDrifterBom\"\n    implementation \"dev.teogor.drifter:drifter-unity-2022-3-7f1:$teogorDrifterBom\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorDrifterBom = \"1.0.0-alpha02\"\n\n    implementation(\"dev.teogor.drifter:drifter-bom:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-codegen:$teogorDrifterBom\")\n\n    // To use Kotlin annotation processing tool (kapt)\n    kapt(\"dev.teogor.drifter:drifter-ksp:$teogorDrifterBom\")\n    // To use Kotlin Symbol Processing (KSP)\n    ksp(\"dev.teogor.drifter:drifter-ksp:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-compose:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-core:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-integration:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-runtime:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-wallpaper:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-unity-common:$teogorDrifterBom\")\n    implementation(\"dev.teogor.drifter:drifter-unity-2022-3-7f1:$teogorDrifterBom\")\n}\n</code></pre>"},{"location":"bom/implementation/#managing-bom-versions-with-version-catalog-recommended","title":"Managing BoM Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of BoM dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-drifter-bom = \"1.0.0-alpha02\"\n\n[libraries]\nteogor-drifter-bom = { group = \"dev.teogor.drifter\", name = \"drifter-bom\", version.ref = \"teogor-drifter-bom\" }\nteogor-drifter-codegen = { group = \"dev.teogor.drifter\", name = \"drifter-codegen\" }\nteogor-drifter-ksp = { group = \"dev.teogor.drifter\", name = \"drifter-ksp\" }\nteogor-drifter-compose = { group = \"dev.teogor.drifter\", name = \"drifter-compose\" }\nteogor-drifter-core = { group = \"dev.teogor.drifter\", name = \"drifter-core\" }\nteogor-drifter-integration = { group = \"dev.teogor.drifter\", name = \"drifter-integration\" }\nteogor-drifter-runtime = { group = \"dev.teogor.drifter\", name = \"drifter-runtime\" }\nteogor-drifter-wallpaper = { group = \"dev.teogor.drifter\", name = \"drifter-wallpaper\" }\nteogor-drifter-unity-common = { group = \"dev.teogor.drifter\", name = \"drifter-unity-common\" }\nteogor-drifter-unity-2022-3-7f1 = { group = \"dev.teogor.drifter\", name = \"drifter-unity-2022-3-7f1\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-drifter-bom = \"1.0.0-alpha02\"\n\n[libraries]\nteogor-drifter-bom = { module = \"dev.teogor.drifter:drifter-bom\", version.ref = \"teogor-drifter-bom\" }\nteogor-drifter-codegen = { module = \"dev.teogor.drifter:drifter-codegen\" }\nteogor-drifter-ksp = { module = \"dev.teogor.drifter:drifter-ksp\" }\nteogor-drifter-compose = { module = \"dev.teogor.drifter:drifter-compose\" }\nteogor-drifter-core = { module = \"dev.teogor.drifter:drifter-core\" }\nteogor-drifter-integration = { module = \"dev.teogor.drifter:drifter-integration\" }\nteogor-drifter-runtime = { module = \"dev.teogor.drifter:drifter-runtime\" }\nteogor-drifter-wallpaper = { module = \"dev.teogor.drifter:drifter-wallpaper\" }\nteogor-drifter-unity-common = { module = \"dev.teogor.drifter:drifter-unity-common\" }\nteogor-drifter-unity-2022-3-7f1 = { module = \"dev.teogor.drifter:drifter-unity-2022-3-7f1\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation platform(libs.teogor.drifter.bom)\n    implementation libs.teogor.drifter.codegen\n\n    // To use Kotlin annotation processing tool (kapt)\n    kapt libs.teogor.drifter.ksp\n    // To use Kotlin Symbol Processing (KSP)\n    ksp libs.teogor.drifter.ksp\n    implementation libs.teogor.drifter.compose\n    implementation libs.teogor.drifter.core\n    implementation libs.teogor.drifter.integration\n    implementation libs.teogor.drifter.runtime\n    implementation libs.teogor.drifter.wallpaper\n    implementation libs.teogor.drifter.unity.common\n    implementation libs.teogor.drifter.unity.2022.3.7f1\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(platform(libs.teogor.drifter.bom))\n    implementation(libs.teogor.drifter.codegen)\n\n    // To use Kotlin annotation processing tool (kapt)\n    kapt(libs.teogor.drifter.ksp)\n    // To use Kotlin Symbol Processing (KSP)\n    ksp(libs.teogor.drifter.ksp)\n    implementation(libs.teogor.drifter.compose)\n    implementation(libs.teogor.drifter.core)\n    implementation(libs.teogor.drifter.integration)\n    implementation(libs.teogor.drifter.runtime)\n    implementation(libs.teogor.drifter.wallpaper)\n    implementation(libs.teogor.drifter.unity.common)\n    implementation(libs.teogor.drifter.unity.2022.3.7f1)\n}\n</code></pre>"},{"location":"releases/implementation/","title":"Implementation","text":""},{"location":"releases/implementation/#implementation","title":"Implementation","text":""},{"location":"releases/implementation/#latest-version","title":"Latest Version","text":"<p>The latest release is <code>1.0.0-alpha01</code></p>"},{"location":"releases/implementation/#bom-releases","title":"BoM Releases","text":"<p>The BoM (Bill of Materials) is the central repository for managing library versions within the Drifter project. It streamlines the process of tracking the latest versions of key components and dependencies, ensuring that your project remains up-to-date and compatible with the latest advancements.</p> <p>Here's a summary of the latest BoM versions:</p> Version Release Notes Release Date 1.0.0-alpha01 changelog \ud83d\udd17 26 Sept 2023"},{"location":"releases/implementation/#using-version-catalog","title":"Using Version Catalog","text":""},{"location":"releases/implementation/#declare-components","title":"Declare Components","text":"<p>This catalog provides the implementation details of Drifter libraries, including Build of Materials (BoM) and individual libraries, in TOML format.</p> DefaultUsing BoM gradle/libs.versions.toml<pre><code>[versions]\ndrifter = \"1.0.0-alpha01\"\n = \"1.0.0-alpha01\"\ndrifter-unity = \"1.0.0-alpha01\"\n\n[libraries]\ndrifter-codegen = { group = \"dev.teogor.drifter\", name = \"drifter-codegen\", version.ref = \"drifter\" }\ndrifter-common = { group = \"dev.teogor.drifter\", name = \"drifter-common\", version.ref = \"drifter\" }\ndrifter-compose = { group = \"dev.teogor.drifter\", name = \"drifter-compose\", version.ref = \"drifter\" }\ndrifter-integration = { group = \"dev.teogor.drifter\", name = \"drifter-integration\", version.ref = \"drifter\" }\ndrifter = { group = \"dev.teogor.drifter\", name = \"drifter\", version.ref = \"\" }\ndrifter-wallpaper = { group = \"dev.teogor.drifter\", name = \"drifter-wallpaper\", version.ref = \"drifter\" }\ndrifter-ksp = { group = \"dev.teogor.drifter\", name = \"drifter-ksp\", version.ref = \"drifter\" }\ndrifter-runtime = { group = \"dev.teogor.drifter\", name = \"drifter-runtime\", version.ref = \"drifter\" }\ndrifter-unity-common = { group = \"dev.teogor.drifter\", name = \"drifter-unity-common\", version.ref = \"drifter-unity\" }\ndrifter-unity-2022.3.7f1 = { group = \"dev.teogor.drifter\", name = \"drifter-unity-2022-3-7f1\", version.ref = \"drifter-unity\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\ndrifter-bom = \"1.0.0-alpha01\"\n\n[libraries]\ndrifter-bom = { group = \"dev.teogor.drifter\", name = \"drifter-bom\", version.ref = \"drifter-bom\" }\ndrifter-codegen = { group = \"dev.teogor.drifter\", name = \"drifter-codegen\" }\ndrifter-common = { group = \"dev.teogor.drifter\", name = \"drifter-common\" }\ndrifter-compose = { group = \"dev.teogor.drifter\", name = \"drifter-compose\" }\ndrifter-integration = { group = \"dev.teogor.drifter\", name = \"drifter-integration\" }\ndrifter = { group = \"dev.teogor.drifter\", name = \"drifter\" }\ndrifter-wallpaper = { group = \"dev.teogor.drifter\", name = \"drifter-wallpaper\" }\ndrifter-ksp = { group = \"dev.teogor.drifter\", name = \"drifter-ksp\" }\ndrifter-runtime = { group = \"dev.teogor.drifter\", name = \"drifter-runtime\" }\ndrifter-unity-common = { group = \"dev.teogor.drifter\", name = \"drifter-unity-Common\" }\ndrifter-unity-2022.3.7f1 = { group = \"dev.teogor.drifter\", name = \"drifter-unity-2022-3-7f1\" }\n</code></pre>"},{"location":"releases/implementation/#dependencies-implementation","title":"Dependencies Implementation","text":"KotlinGroovy build.gradle.kts<pre><code>dependencies {\n  // When Using Drifter BoM\n  implementation(platform(libs.drifter.bom))\n\n  // Drifter Libraries\n  implementation(libs.drifter.codegen)\n  implementation(libs.drifter.common)\n  implementation(libs.drifter.compose)\n  implementation(libs.drifter.integration)\n  implementation(libs.drifter)\n  implementation(libs.drifter.wallpaper)\n  implementation(libs.drifter.ksp)\n  implementation(libs.drifter.runtime)\n  implementation(libs.drifter.unity.common)\n  implementation(libs.drifter.unity.2022.3.7f1)\n}\n</code></pre> build.gradle<pre><code>dependencies {\n  // When Using Drifter BoM\n  implementation platform(libs.drifter.bom)\n\n  // Drifter Libraries\n  implementation libs.drifter.codegen\n  implementation libs.drifter.common\n  implementation libs.drifter.compose\n  implementation libs.drifter.integration\n  implementation libs.drifter\n  implementation libs.drifter.wallpaper\n  implementation libs.drifter.ksp\n  implementation libs.drifter.runtime\n  implementation libs.drifter.unity.common\n  implementation libs.drifter.unity.2022.3.7f1\n}\n</code></pre>"},{"location":"releases/unity/","title":"Drifter Unity","text":"<p>Learn more: User Guide and Code Samples</p> <p>\ud83c\udfae Drifter simplifies the integration between Unity and Android, enhancing performance seamlessly and effortlessly.</p> <p>API Reference <code>dev.teogor.drifter:drifter-unity-*</code> <code>dev.teogor.drifter:drifter-unity-common</code> <code>dev.teogor.drifter:drifter-unity-2022-3-7f1</code></p> Latest Update Stable Release Release Candidate Beta Release Alpha Release September 26, 2023 - - - 1.0.0-alpha01"},{"location":"releases/unity/#declaring-dependencies","title":"Declaring dependencies","text":"<p>To use Unity in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorDrifterUnity = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.drifter:drifter-unity-common:$teogorDrifterUnity\"\n    implementation \"dev.teogor.drifter:drifter-unity-2022-3-7f1:$teogorDrifterUnity\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorDrifterUnity = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.drifter:drifter-unity-common:$teogorDrifterUnity\")\n    implementation(\"dev.teogor.drifter:drifter-unity-2022-3-7f1:$teogorDrifterUnity\")\n}\n</code></pre> <p>For comprehensive instructions on adding these dependencies, refer to the Unity documentation.</p>"},{"location":"releases/unity/#feedback","title":"Feedback","text":"<p>Your feedback helps make Unity better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues on GitHub for this library before you create a new one.</p> <p>Create a new issue</p>"},{"location":"releases/changelog/1.0.0-alpha01/","title":"Version 1.0.0-alpha01","text":""},{"location":"releases/changelog/1.0.0-alpha01/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Drifter Codegen dev.teogor.drifter:drifter-codegen 1.0.0-alpha01 \ud83e\uddea Drifter Common dev.teogor.drifter:drifter-common 1.0.0-alpha01 \ud83e\uddea Drifter Compose dev.teogor.drifter:drifter-compose 1.0.0-alpha01 \ud83e\uddea Drifter Integration dev.teogor.drifter:drifter-integration 1.0.0-alpha01 \ud83e\uddea Drifter dev.teogor.drifter:drifter 1.0.0-alpha01 \ud83e\uddea Drifter Wallpaper dev.teogor.drifter:drifter-wallpaper 1.0.0-alpha01 \ud83e\uddea Drifter KSP dev.teogor.drifter:drifter-ksp 1.0.0-alpha01 \ud83e\uddea Drifter Runtime dev.teogor.drifter:drifter-runtime 1.0.0-alpha01"},{"location":"releases/changelog/1.0.0-alpha02/","title":"Version 1.0.0-alpha02","text":""},{"location":"releases/changelog/1.0.0-alpha02/#latest-sdk-versions","title":"Latest SDK versions","text":"Status Service or Product Gradle dependency Latest version \ud83e\uddea Drifter Codegen dev.teogor.drifter:drifter-codegen 1.0.0-alpha02 \ud83e\uddea Drifter Common dev.teogor.drifter:drifter-common 1.0.0-alpha02 \ud83e\uddea Drifter Compose dev.teogor.drifter:drifter-compose 1.0.0-alpha02 \ud83e\uddea Drifter Integration dev.teogor.drifter:drifter-integration 1.0.0-alpha02 \ud83e\uddea Drifter Gradle Plugin dev.teogor.drifter:drifter 1.0.0-alpha02 \ud83e\uddea Drifter Wallpaper dev.teogor.drifter:drifter-wallpaper 1.0.0-alpha02 \ud83e\uddea Drifter KSP dev.teogor.drifter:drifter-ksp 1.0.0-alpha02 \ud83e\uddea Drifter Runtime dev.teogor.drifter:drifter-runtime 1.0.0-alpha02 \ud83e\uddea Drifter Unity Common dev.teogor.drifter:drifter-unity-common 1.0.0-alpha01 \ud83e\uddea Drifter Unity 2022.3.7f1 dev.teogor.drifter:drifter-unity-2022-3-7f1 1.0.0-alpha01"},{"location":"unity/","title":"Unity","text":""},{"location":"unity/#getting-started-with-unity","title":"Getting Started with Unity","text":"<p>Adding Dependencies:</p> <ul> <li>Manual Setup:  This section guides you through adding Unity dependencies directly to your project's <code>build.gradle</code> files. (Link to Manual Dependency Setup Section)</li> <li>Version Catalog (Recommended): For a more streamlined approach, consider integrating a version catalog. This allows for centralized version management and easier updates. (Link to Version Catalog Section)</li> </ul> <p>Note: If you prefer manual dependency setup, follow the instructions in the \"Manual Setup\" section. Otherwise, jump to the \"Version Catalog\" section for centralized management.</p> <p>For information on using the KAPT plugin, see the KAPT documentation. For information on using the KSP plugin, see the KSP quick-start documentation. For more information about dependencies, see Add Build Dependencies.  </p>"},{"location":"unity/#adding-unity-dependencies-manually","title":"Adding Unity Dependencies Manually","text":"<p>To use Unity in your app, add the following dependencies to your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    def teogorDrifterUnity = \"1.0.0-alpha01\"\n\n    implementation \"dev.teogor.drifter:drifter-unity-common:$teogorDrifterUnity\"\n    implementation \"dev.teogor.drifter:drifter-unity-2022-3-7f1:$teogorDrifterUnity\"\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    val teogorDrifterUnity = \"1.0.0-alpha01\"\n\n    implementation(\"dev.teogor.drifter:drifter-unity-common:$teogorDrifterUnity\")\n    implementation(\"dev.teogor.drifter:drifter-unity-2022-3-7f1:$teogorDrifterUnity\")\n}\n</code></pre>"},{"location":"unity/#managing-unity-versions-with-version-catalog-recommended","title":"Managing Unity Versions with Version Catalog (Recommended)","text":"<p>This section guides you through utilizing a version catalog for centralized management of Unity dependencies in your project. This approach simplifies updates and ensures consistency.</p> <p>First, define the dependencies in the <code>libs.versions.toml</code> file:</p> <ul> <li>Group-Name Based: This approach is used for declaring libraries referenced by group and artifact name.</li> <li>Module Based: This approach is used for declaring libraries referenced by their module.</li> </ul> Group-Name BasedModule Based gradle/libs.versions.toml<pre><code>[versions]\nteogor-drifter-unity = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-drifter-unity-common = { group = \"dev.teogor.drifter\", name = \"drifter-unity-common\", version.ref = \"teogor-drifter-unity\" }\nteogor-drifter-unity-2022-3-7f1 = { group = \"dev.teogor.drifter\", name = \"drifter-unity-2022-3-7f1\", version.ref = \"teogor-drifter-unity\" }\n</code></pre> gradle/libs.versions.toml<pre><code>[versions]\nteogor-drifter-unity = \"1.0.0-alpha01\"\n\n[libraries]\nteogor-drifter-unity-common = { module = \"dev.teogor.drifter:drifter-unity-common\", version.ref = \"teogor-drifter-unity\" }\nteogor-drifter-unity-2022-3-7f1 = { module = \"dev.teogor.drifter:drifter-unity-2022-3-7f1\", version.ref = \"teogor-drifter-unity\" }\n</code></pre> <p>Then, add these dependencies in your app's <code>build.gradle</code> file:</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    implementation libs.teogor.drifter.unity.common\n    implementation libs.teogor.drifter.unity.2022.3.7f1\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    implementation(libs.teogor.drifter.unity.common)\n    implementation(libs.teogor.drifter.unity.2022.3.7f1)\n}\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}